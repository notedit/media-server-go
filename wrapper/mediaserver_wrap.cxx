/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.1
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

// source: mediaserver.i

#define SWIGMODULE native
#define SWIG_DIRECTORS

#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>



typedef long long intgo;
typedef unsigned long long uintgo;


# if !defined(__clang__) && (defined(__i386__) || defined(__x86_64__))
#   define SWIGSTRUCTPACKED __attribute__((__packed__, __gcc_struct__))
# else
#   define SWIGSTRUCTPACKED __attribute__((__packed__))
# endif



typedef struct { char *p; intgo n; } _gostring_;
typedef struct { void* array; intgo len; intgo cap; } _goslice_;




#define swiggo_size_assert_eq(x, y, name) typedef char name[(x-y)*(x-y)*-2+1];
#define swiggo_size_assert(t, n) swiggo_size_assert_eq(sizeof(t), n, swiggo_sizeof_##t##_is_not_##n)

swiggo_size_assert(char, 1)
swiggo_size_assert(short, 2)
swiggo_size_assert(int, 4)
typedef long long swiggo_long_long;
swiggo_size_assert(swiggo_long_long, 8)
swiggo_size_assert(float, 4)
swiggo_size_assert(double, 8)

#ifdef __cplusplus
extern "C" {
#endif
extern void crosscall2(void (*fn)(void *, int), void *, int);
extern char* _cgo_topofstack(void) __attribute__ ((weak));
extern void _cgo_allocate(void *, int);
extern void _cgo_panic(void *, int);
#ifdef __cplusplus
}
#endif

static char *_swig_topofstack() {
  if (_cgo_topofstack) {
    return _cgo_topofstack();
  } else {
    return 0;
  }
}

static void _swig_gopanic(const char *p) {
  struct {
    const char *p;
  } SWIGSTRUCTPACKED a;
  a.p = p;
  crosscall2(_cgo_panic, &a, (int) sizeof a);
}




#define SWIG_contract_assert(expr, msg) \
  if (!(expr)) { _swig_gopanic(msg); } else


static _gostring_ Swig_AllocateString(const char *p, size_t l) {
  _gostring_ ret;
  ret.p = (char*)malloc(l);
  memcpy(ret.p, p, l);
  ret.n = l;
  return ret;
}

/* -----------------------------------------------------------------------------
 * director_common.swg
 *
 * This file contains support for director classes which is common between
 * languages.
 * ----------------------------------------------------------------------------- */

/*
  Use -DSWIG_DIRECTOR_STATIC if you prefer to avoid the use of the
  'Swig' namespace. This could be useful for multi-modules projects.
*/
#ifdef SWIG_DIRECTOR_STATIC
/* Force anonymous (static) namespace */
#define Swig
#endif
/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that Go proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#include <exception>
#include <map>

namespace Swig {

  class DirectorException : public std::exception {
  };
}

/* Handle memory management for directors.  */

namespace {
  struct GCItem {
    virtual ~GCItem() {}
  };

  struct GCItem_var {
    GCItem_var(GCItem *item = 0) : _item(item) {
    }

    GCItem_var& operator=(GCItem *item) {
      GCItem *tmp = _item;
      _item = item;
      delete tmp;
      return *this;
    }

    ~GCItem_var() {
      delete _item;
    }

    GCItem* operator->() {
      return _item;
    }

    private:
      GCItem *_item;
  };

  template <typename Type>
  struct GCItem_T : GCItem {
    GCItem_T(Type *ptr) : _ptr(ptr) {
    }

    virtual ~GCItem_T() {
      delete _ptr;
    }

  private:
    Type *_ptr;
  };
}

class Swig_memory {
public:
  template <typename Type>
  void swig_acquire_pointer(Type* vptr) {
    if (vptr) {
      swig_owner[vptr] = new GCItem_T<Type>(vptr);
    }
  }
private:
  typedef std::map<void *, GCItem_var> swig_ownership_map;
  swig_ownership_map swig_owner;
};

template <typename Type>
static void swig_acquire_pointer(Swig_memory** pmem, Type* ptr) {
  if (!pmem) {
    *pmem = new Swig_memory;
  }
  (*pmem)->swig_acquire_pointer(ptr);
}

static void Swig_free(void* p) {
  free(p);
}

static void* Swig_malloc(int c) {
  return malloc(c);
}



#include <string>
#include <list>
#include <functional>
#include "../media-server/include/config.h"
#include "../media-server/include/dtls.h"
#include "../media-server/include/OpenSSL.h"
#include "../media-server/include/media.h"
#include "../media-server/include/video.h"
#include "../media-server/include/audio.h"
#include "../media-server/include/rtp.h"
#include "../media-server/include/tools.h"
#include "../media-server/include/rtpsession.h"
#include "../media-server/include/DTLSICETransport.h"
#include "../media-server/include/RTPBundleTransport.h"
#include "../media-server/include/mp4recorder.h"
#include "../media-server/include/mp4streamer.h"
#include "../media-server/include/rtp/RTPStreamTransponder.h"
#include "../media-server/include/ActiveSpeakerDetector.h"
#include "../media-server/include/EventLoop.h"


using RTPBundleTransportConnection = RTPBundleTransport::Connection;
using MediaFrameListener = MediaFrame::Listener;


class PropertiesFacade : private Properties
{
public:
	void SetPropertyInt(const char* key,int intval)
	{
		Properties::SetProperty(key,intval);
	}
	void SetPropertyStr(const char* key,const char* val)
	{
		Properties::SetProperty(key,val);
	}
	void SetPropertyBool(const char* key,bool boolval)
	{
		Properties::SetProperty(key,boolval);
	}
};


class MediaServer
{

public:

	static void Initialize()
	{
		//Initialize ssl
		OpenSSL::ClassInit();
		
		//Start DTLS
		DTLSConnection::Initialize();
	}
	
	static void EnableLog(bool flag)
	{
		//Enable log
		Log("-EnableLog [%d]\n",flag);
		Logger::EnableLog(flag);
	}
	
	static void EnableDebug(bool flag)
	{
		//Enable debug
		Logger::EnableDebug(flag);
	}
	
	static void EnableUltraDebug(bool flag)
	{
		//Enable debug
		Log("-EnableUltraDebug [%d]\n",flag);
		Logger::EnableUltraDebug(flag);
	}
	
	static bool SetPortRange(int minPort, int maxPort)
	{
		return RTPTransport::SetPortRange(minPort,maxPort);
	}
	
	static std::string GetFingerprint()
	{
		return DTLSConnection::GetCertificateFingerPrint(DTLSConnection::Hash::SHA256);
	}
};


class RTPSessionFacade : 	
	public RTPSender,
	public RTPReceiver,
	public RTPSession
{
public:
	RTPSessionFacade(MediaFrame::Type media) : RTPSession(media,NULL)
	{
		//Delegate to group
		delegate = true;
		//Start group dispatch
		GetIncomingSourceGroup()->Start();
	}
	virtual ~RTPSessionFacade() = default;

	virtual int Enqueue(const RTPPacket::shared& packet)	 { return SendPacket(packet); }
	virtual int Enqueue(const RTPPacket::shared& packet,std::function<RTPPacket::shared(const RTPPacket::shared&)> modifier) { return SendPacket(modifier(packet)); }
	virtual int SendPLI(DWORD ssrc)				 { return RequestFPU();}
	
	int Init(const Properties &properties)
	{
		RTPMap rtp;
		RTPMap apt;
		
		//Get codecs
		std::vector<Properties> codecs;
		properties.GetChildrenArray("codecs",codecs);

		//For each codec
		for (auto it = codecs.begin(); it!=codecs.end(); ++it)
		{
			
			BYTE codec;
			//Depending on the type
			switch (GetMediaType())
			{
				case MediaFrame::Audio:
					codec = (BYTE)AudioCodec::GetCodecForName(it->GetProperty("codec"));
					break;
				case MediaFrame::Video:
					codec = (BYTE)VideoCodec::GetCodecForName(it->GetProperty("codec"));
					break;
				default:
					//skip 
					continue;
					
			}

			if (codec == (BYTE)-1) {
				continue;
			}

			//Get codec type
			BYTE type = it->GetProperty("pt",0);
			//ADD it
			rtp[type] = codec;
		}
	
		//Set local 
		RTPSession::SetSendingRTPMap(rtp,apt);
		RTPSession::SetReceivingRTPMap(rtp,apt);
		
		//Call parent
		return RTPSession::Init();
	}
};


class MP4RecorderFacade :
    public MP4Recorder,
    public MP4Recorder::Listener
{
public:
    MP4RecorderFacade() :
        MP4Recorder(this)
    {

    }

    void onFirstFrame(QWORD time) override
    {
        // todo
    }

    void onClosed() override
    {
        // todo
    }
};


class ActiveTrackListener {
public:
	ActiveTrackListener()
	{

	}
	virtual ~ActiveTrackListener() {

	}
	virtual void onActiveTrackchanged(uint32_t id){

	}
};




class MediaFrameSessionFacade :
	public RTPReceiver
{
public:
	MediaFrameSessionFacade(MediaFrame::Type media):
	source(media,loop)
	{

		loop.Start(-1);
		source.Start();
		mediatype = media;
	}
	int Init(const Properties &properties)
	{
		//Get codecs
		std::vector<Properties> codecs;
		properties.GetChildrenArray("codecs",codecs);

		//For each codec
		for (auto it = codecs.begin(); it!=codecs.end(); ++it)
		{

			BYTE codec;
			//Depending on the type
			switch (mediatype)
			{
				case MediaFrame::Audio:
					codec = (BYTE)AudioCodec::GetCodecForName(it->GetProperty("codec"));
					audioCodec = codec;
					break;
				case MediaFrame::Video:
					codec = (BYTE)VideoCodec::GetCodecForName(it->GetProperty("codec"));
					videoCodec = codec;
					break;
				default:
					///Ignore
					codec = (BYTE)-1;
					break;
			}

			//Get codec type
			BYTE type = it->GetProperty("pt",0);
			//ADD it
			rtp[type] = codec;
		}

		return 1;
	}

	void onRTPPacket(uint8_t* data, int size)
	{


		// Run on thread
		loop.Async([=](...)  {

			RTPHeader header;
			RTPHeaderExtension extension;

			int lsize = size;
			int len = header.Parse(data,lsize);

			if (!len)
			{
				//Debug
				Debug("-MediaFrameSessionFacade::onRTPPacket() | Could not parse RTP header\n");
				return;
			}

			if (header.extension)
			{

				//Parse extension
				int l = extension.Parse(extMap,data+len,lsize-len);
				//If not parsed
				if (!l)
				{
					///Debug
					Debug("-MediaFrameSessionFacade::onRTPPacket() | Could not parse RTP header extension\n");
					//Exit
					return;
				}
				//Inc ini
				len += l;
			}

			if (header.padding)
			{
				//Get last 2 bytes
				WORD padding = get1(data,lsize-1);
				//Ensure we have enought size
				if (size-len<padding)
				{
					///Debug
					Debug("-PCAPTransportEmulator::Run() | RTP padding is bigger than size [padding:%u,size%u]\n",padding,size);
					//Ignore this try again
					return;
				}
				//Remove from size
				lsize -= padding;
			}


			DWORD ssrc = header.ssrc;
			BYTE type  = header.payloadType;
			//Get initial codec
			BYTE codec = rtp.GetCodecForType(header.payloadType);;

			//Check codec
			if (codec==RTPMap::NotFound)
			{
				//Exit
				Error("-MediaFrameSessionFacade::onRTPPacket(%s) | RTP packet type unknown [%d]\n",MediaFrame::TypeToString(mediatype),type);
				//Exit
				return;
			}

			auto packet = std::make_shared<RTPPacket>(mediatype,codec,header,extension);

			//Set the payload
			packet->SetPayload(data+len,lsize-len);

			WORD seq = packet->GetSeqNum();

			source.media.SetSeqNum(seq);

			if (source.media.ssrc != ssrc) {
				source.media.Reset();
				source.media.ssrc = ssrc;
			}

			source.media.Update(getTimeMS(),packet->GetSeqNum(),packet->GetRTPHeader().GetSize()+packet->GetMediaLength());

			WORD cycles = source.media.SetSeqNum(packet->GetSeqNum());
            //Set cycles back
            packet->SetSeqCycles(cycles);

			source.AddPacket(packet,0);

		});
	}

	void onRTPData(uint8_t* data, int size, uint32_t timestamp)
	{

	}

	RTPIncomingSourceGroup* GetIncomingSourceGroup()
	{
		return &source;
	}
	int End()
	{
		Log("MediaFrameSessionFacade End\n");
		return 1;
	}
	virtual int SendPLI(DWORD ssrc) {
		return 1;
	}

private:
	RTPMap extMap;
	RTPMap rtp;
	RTPMap apt;
	BYTE audioCodec;
	BYTE videoCodec;

	DWORD ssrc = 0;
	DWORD extSeqNum = 0;

	MediaFrame::Type mediatype;
	EventLoop loop;
	RTPIncomingSourceGroup source;
};




class RTPSenderFacade
{
public:	
	RTPSenderFacade(DTLSICETransport* transport)
	{
		sender = transport;
	}

	RTPSenderFacade(RTPSessionFacade* session)
	{
		sender = session;
	}
	
	RTPSender* get() { return sender;}
private:
	RTPSender* sender;
};

class RTPReceiverFacade
{
public:	
	RTPReceiverFacade(DTLSICETransport* transport)
	{
		receiver = transport;
	}

	RTPReceiverFacade(RTPSessionFacade* session)
	{
		receiver = session;
	}

    RTPReceiverFacade(MediaFrameSessionFacade* session)
    {
        receiver = session;
    }


	int SendPLI(DWORD ssrc)
	{
		return receiver ? receiver->SendPLI(ssrc) : 0;
	}
	
	RTPReceiver* get() { return receiver;}
private:
	RTPReceiver* receiver;
};


RTPSenderFacade* TransportToSender(DTLSICETransport* transport)
{
	return new RTPSenderFacade(transport);
}
RTPReceiverFacade* TransportToReceiver(DTLSICETransport* transport)
{
	return new RTPReceiverFacade(transport);
}

RTPSenderFacade* SessionToSender(RTPSessionFacade* session)
{
	return new RTPSenderFacade(session);	
}

RTPReceiverFacade* SessionToReceiver(RTPSessionFacade* session)
{
	return new RTPReceiverFacade(session);
}


RTPReceiverFacade* RTPSessionToReceiver(MediaFrameSessionFacade* session)
{
	return new RTPReceiverFacade(session);
}




class RTPStreamTransponderFacade : 
	public RTPStreamTransponder
{
public:
	RTPStreamTransponderFacade(RTPOutgoingSourceGroup* outgoing,RTPSenderFacade* sender) :
		RTPStreamTransponder(outgoing, sender ? sender->get() : NULL)
	{}

	bool SetIncoming(RTPIncomingMediaStream* incoming, RTPReceiverFacade* receiver)
	{
		return RTPStreamTransponder::SetIncoming(incoming, receiver ? receiver->get() : NULL);
	}

	bool SetIncoming(RTPIncomingMediaStream* incoming, RTPReceiver* receiver)
	{
		return RTPStreamTransponder::SetIncoming(incoming, receiver);
	}
	
	virtual void onREMB(RTPOutgoingSourceGroup* group,DWORD ssrc, DWORD bitrate) override
	{
		// todo  make callback
		// Log("onREMB\n");
	}
	void SetMinPeriod(DWORD period) { this->period = period; }

private:
	DWORD period = 1000;
	QWORD last = 0;
};



class StreamTrackDepacketizer :
	public RTPIncomingMediaStream::Listener
{
public:
	StreamTrackDepacketizer(RTPIncomingMediaStream* incomingSource)
	{
		//Store
		this->incomingSource = incomingSource;
		//Add us as RTP listeners
		this->incomingSource->AddListener(this);
		//No depkacketixer yet
		depacketizer = NULL;
	}

	virtual ~StreamTrackDepacketizer()
	{
		//JIC
		Stop();
		//Check 
		if (depacketizer)
			//Delete depacketier
			delete(depacketizer);
	}

	virtual void onRTP(RTPIncomingMediaStream* group,const RTPPacket::shared& packet)
	{

	    if (listeners.empty())
	           return;


		//If depacketizer is not the same codec 
		if (depacketizer && depacketizer->GetCodec()!=packet->GetCodec())
		{
			//Delete it
			delete(depacketizer);
			//Create it next
			depacketizer = NULL;
		}
		//If we don't have a depacketized
		if (!depacketizer)
			//Create one
			depacketizer = RTPDepacketizer::Create(packet->GetMedia(),packet->GetCodec());
		//Ensure we have it
		if (!depacketizer)
			//Do nothing
			return;
		//Pass the pakcet to the depacketizer
		 MediaFrame* frame = depacketizer->AddPacket(packet);
		 
		 //If we have a new frame
		 if (frame)
		 {
			 //Call all listeners
			 for (const auto& listener : listeners)
				 //Call listener
				 listener->onMediaFrame(packet->GetSSRC(),*frame);
			 //Next
			 depacketizer->ResetFrame();
		 }	
	}

	virtual void onBye(RTPIncomingMediaStream* group) 
	{
		if(depacketizer)
			//Skip current
			depacketizer->ResetFrame();
	}
	
	virtual void onEnded(RTPIncomingMediaStream* group) 
	{
		if (incomingSource==group)
			incomingSource = nullptr;
	}
	
	void AddMediaListener(MediaFrame::Listener *listener)
	{
		//Add to set
		if (!incomingSource || !listener)
			//Done
			return;
		//Add listener async
		incomingSource->GetTimeService().Async([=](...){
			//Add to set
			listeners.insert(listener);
		});
	}
	
	void RemoveMediaListener(MediaFrame::Listener *listener)
	{
		//Remove from set
		if (!incomingSource)
			//Done
			return;

		//Add listener sync so it can be deleted after this call
		incomingSource->GetTimeService().Sync([=](...){
			//Remove from set
			listeners.erase(listener);
		});
	}
	
	void Stop()
	{
		//If already stopped
		if (!incomingSource)
			//Done
			return;
		
		//Stop listeneing
		incomingSource->RemoveListener(this);
		//Clean it
		incomingSource = NULL;
	}
	
private:
    std::set<MediaFrame::Listener*> listeners;
	RTPDepacketizer* depacketizer;
	RTPIncomingMediaStream* incomingSource;
};



class DTLSICETransportListener :
	public DTLSICETransport::Listener
{
public:
	DTLSICETransportListener()
	{

 	}

 	virtual ~DTLSICETransportListener() = default;

 	virtual void onRemoteICECandidateActivated(const std::string& ip, uint16_t port, uint32_t priority) override
 	{

 	    // todo
 	}

 	virtual void onDTLSStateChanged(const DTLSICETransport::DTLSState state) override 
	{

		switch(state)
		{
			case DTLSICETransport::DTLSState::New:
				onDTLSStateChange(0);
				break;
			case DTLSICETransport::DTLSState::Connecting:
				onDTLSStateChange(1);
				break;
			case DTLSICETransport::DTLSState::Connected:
				onDTLSStateChange(2);
				break;
			case DTLSICETransport::DTLSState::Closed:
				onDTLSStateChange(3);
				break;
			case DTLSICETransport::DTLSState::Failed:
				onDTLSStateChange(4);
				break;
		}
	}

	virtual void onDTLSStateChange(uint32_t state)
	{

	}
};




class SenderSideEstimatorListener : 
	public RemoteRateEstimator::Listener
{
public:
	SenderSideEstimatorListener()
	{
		
	}
	
	virtual void onTargetBitrateRequested(DWORD bitrate) override 
	{
        // todo make callback
	}

private:
	DWORD period  = 500;
	QWORD last = 0;
};



EvenSource::EvenSource()
{
}

EvenSource::EvenSource(const char* str)
{
}

EvenSource::EvenSource(const std::wstring &str)
{
}

EvenSource::~EvenSource()
{
}

void EvenSource::SendEvent(const char* type,const char* msg,...)
{
}


class LayerSources : public std::vector<LayerSource*>
{
public:
	size_t size() const  { return std::vector<LayerSource*>::size(); }
	LayerSource* get(size_t i)	{ return  std::vector<LayerSource*>::at(i); }
};



class ActiveSpeakerDetectorFacade :
	public ActiveSpeakerDetector,
	public ActiveSpeakerDetector::Listener,
	public RTPIncomingMediaStream::Listener
{
public:	
	ActiveSpeakerDetectorFacade(ActiveTrackListener* listener) :
		ActiveSpeakerDetector(this),
		listener(listener)
	{};
		
	virtual void onActiveSpeakerChanded(uint32_t id) override
	{
        // todo make callback

		if (listener) 
		{
			listener->onActiveTrackchanged(id);
		}
	}
	
	void AddIncomingSourceGroup(RTPIncomingMediaStream* incoming, uint32_t id)
	{
			if (incoming)
    		{
    			ScopedLock lock(mutex);
    			//Insert new
    			auto [it,inserted] = sources.try_emplace(incoming,id);
    			//If already present
    			if (!inserted)
    				//do nothing
    				return;
    			//Add us as rtp listeners
    			incoming->AddListener(this);
    			//initialize to silence
    			ActiveSpeakerDetector::Accumulate(id, false, 127, getTimeMS());
    		}
	}
	
	void RemoveIncomingSourceGroup(RTPIncomingMediaStream* incoming)
	{
		if (incoming)
		{	
			ScopedLock lock(mutex);
			//Get map
			auto it = sources.find(incoming);
			//check it was present
			if (it==sources.end())
				//Do nothing
				return;
			//Remove listener
			incoming->RemoveListener(this);
			//RElease id
			ActiveSpeakerDetector::Release(it->second);
			//Erase
			sources.erase(it);
		}
	}
	
	virtual void onRTP(RTPIncomingMediaStream* incoming,const RTPPacket::shared& packet) override
	{
        if (packet->HasAudioLevel())
        {
            ScopedLock lock(mutex);
            //Get map
            auto it = sources.find(incoming);
            //check it was present
            if (it==sources.end())
                //Do nothing
                return;
            //Accumulate on id
            ActiveSpeakerDetector::Accumulate(it->second, packet->GetVAD(),packet->GetLevel(), getTimeMS());
        }
	}		

	virtual void onBye(RTPIncomingMediaStream* incoming) override
	{

	}
	
	virtual void onEnded(RTPIncomingMediaStream* incoming) override
	{
		if (incoming)
		{
			ScopedLock lock(mutex);
			//Get map
			auto it = sources.find(incoming);
			//check it was present
			if (it==sources.end())
				//Do nothing
			//Release id
			ActiveSpeakerDetector::Release(it->second);
			//Erase
			sources.erase(it);
		}
	}
private:
	Mutex mutex;
	std::map<RTPIncomingMediaStream*,uint32_t> sources;
	ActiveTrackListener* listener;
};


class  MediaFrameListenerFacade:
	public MediaFrameListener
{
public:
	MediaFrameListenerFacade()
	{

	}

	virtual void onMediaFrame(const MediaFrame &frame)  {

	}
	virtual void onMediaFrame(DWORD ssrc, const MediaFrame &frame) {

		onMediaFrame(frame);
	}
	
};


class MediaFrameMultiplexer :
	public RTPIncomingMediaStream::Listener
{
public:
	MediaFrameMultiplexer(RTPIncomingMediaStream* incomingSource)
	{
		//Store
		this->incomingSource = incomingSource;
		//Add us as RTP listeners
		this->incomingSource->AddListener(this);
		//No depkacketixer yet
		depacketizer = NULL;
	}

	virtual ~MediaFrameMultiplexer()
	{
		//JIC
		Stop();
		//Check 
		if (depacketizer)
			//Delete depacketier
			delete(depacketizer);
	}

	virtual void onRTP(RTPIncomingMediaStream* group,const RTPPacket::shared& packet)
	{

		if (listeners.empty()) 
			return;


		if (depacketizer && depacketizer->GetCodec()!=packet->GetCodec())
		{
			//Delete it
			delete(depacketizer);
			//Create it next
			depacketizer = NULL;
		}
		//If we don't have a depacketized
		if (!depacketizer)
			//Create one
			depacketizer = RTPDepacketizer::Create(packet->GetMedia(),packet->GetCodec());
		//Ensure we have it
		if (!depacketizer)
			//Do nothing
			return;
		//Pass the pakcet to the depacketizer
		 MediaFrame* frame = depacketizer->AddPacket(packet);
		 
		 //If we have a new frame
		 if (frame)
		 {
			 //Call all listeners
			 for (Listeners::const_iterator it = listeners.begin();it!=listeners.end();++it)
				 //Call listener
				 (*it)->onMediaFrame(*frame);
			 //Next
			 depacketizer->ResetFrame();
		 }

	}

	virtual void onBye(RTPIncomingMediaStream* group) 
	{
		if(depacketizer)
			//Skip current
			depacketizer->ResetFrame();
	}
	
	virtual void onEnded(RTPIncomingMediaStream* group) 
	{
		if (incomingSource==group)
			incomingSource = nullptr;
	}
	
	void AddMediaListener(MediaFrameListener *listener)
	{
		//Add to set
		listeners.insert(listener);
	}
	
	void RemoveMediaListener(MediaFrameListener *listener)
	{
		//Remove from set
		listeners.erase(listener);
	}
	
	void Stop()
	{
		//If already stopped
		if (!incomingSource)
			//Done
			return;
		
		//Stop listeneing
		incomingSource->RemoveListener(this);
		//Clean it
		incomingSource = NULL;
	}
	
private:
	typedef std::set<MediaFrameListener*> Listeners;
private:
	Listeners listeners;
	RTPDepacketizer* depacketizer;
	RTPIncomingMediaStream* incomingSource;
};



#include <stdint.h>		// Use the C99 official header


#include <string>


#include <vector>
#include <stdexcept>


using MediaFrameType = MediaFrame::Type;

SWIGINTERN LayerSources RTPIncomingSource_layers(RTPIncomingSource *self){
			LayerSources layers;
			for(auto it = self->layers.begin(); it != self->layers.end(); ++it )
				layers.push_back(&(it->second));
			return layers;
		}

using RTPIncomingMediaStreamListener = RTPIncomingMediaStream::Listener;


using RemoteRateEstimatorListener = RemoteRateEstimator::Listener;


// C++ director class methods.
#include "mediaserver_wrap.h"

SwigDirector_DTLSICETransportListener::SwigDirector_DTLSICETransportListener(int swig_p)
    : DTLSICETransportListener(),
      go_val(swig_p), swig_mem(0)
{ }

extern "C" void Swiggo_DeleteDirector_DTLSICETransportListener_native_2ca2fe9cd83b6fb4(intgo);
SwigDirector_DTLSICETransportListener::~SwigDirector_DTLSICETransportListener()
{
  Swiggo_DeleteDirector_DTLSICETransportListener_native_2ca2fe9cd83b6fb4(go_val);
  delete swig_mem;
}

extern "C" void Swig_DirectorDTLSICETransportListener_callback_onDTLSStateChange_native_2ca2fe9cd83b6fb4(int, intgo arg2);
void SwigDirector_DTLSICETransportListener::onDTLSStateChange(uint32_t state) {
  intgo swig_arg2;
  
  swig_arg2 = (uint32_t)state; 
  Swig_DirectorDTLSICETransportListener_callback_onDTLSStateChange_native_2ca2fe9cd83b6fb4(go_val, swig_arg2);
}

SwigDirector_SenderSideEstimatorListener::SwigDirector_SenderSideEstimatorListener(int swig_p)
    : SenderSideEstimatorListener(),
      go_val(swig_p), swig_mem(0)
{ }

extern "C" void Swiggo_DeleteDirector_SenderSideEstimatorListener_native_2ca2fe9cd83b6fb4(intgo);
SwigDirector_SenderSideEstimatorListener::~SwigDirector_SenderSideEstimatorListener()
{
  Swiggo_DeleteDirector_SenderSideEstimatorListener_native_2ca2fe9cd83b6fb4(go_val);
  delete swig_mem;
}

SwigDirector_MediaFrameListenerFacade::SwigDirector_MediaFrameListenerFacade(int swig_p)
    : MediaFrameListenerFacade(),
      go_val(swig_p), swig_mem(0)
{ }

extern "C" void Swiggo_DeleteDirector_MediaFrameListenerFacade_native_2ca2fe9cd83b6fb4(intgo);
SwigDirector_MediaFrameListenerFacade::~SwigDirector_MediaFrameListenerFacade()
{
  Swiggo_DeleteDirector_MediaFrameListenerFacade_native_2ca2fe9cd83b6fb4(go_val);
  delete swig_mem;
}

extern "C" void Swig_DirectorMediaFrameListenerFacade_callback_onMediaFrame_native_2ca2fe9cd83b6fb4(int, MediaFrame *arg2);
void SwigDirector_MediaFrameListenerFacade::onMediaFrame(MediaFrame const &frame) {
  MediaFrame *swig_arg2;
  
  swig_arg2 = (MediaFrame *)&frame; 
  Swig_DirectorMediaFrameListenerFacade_callback_onMediaFrame_native_2ca2fe9cd83b6fb4(go_val, swig_arg2);
}

SwigDirector_ActiveTrackListener::SwigDirector_ActiveTrackListener(int swig_p)
    : ActiveTrackListener(),
      go_val(swig_p), swig_mem(0)
{ }

extern "C" void Swiggo_DeleteDirector_ActiveTrackListener_native_2ca2fe9cd83b6fb4(intgo);
SwigDirector_ActiveTrackListener::~SwigDirector_ActiveTrackListener()
{
  Swiggo_DeleteDirector_ActiveTrackListener_native_2ca2fe9cd83b6fb4(go_val);
  delete swig_mem;
}

extern "C" void Swig_DirectorActiveTrackListener_callback_onActiveTrackchanged_native_2ca2fe9cd83b6fb4(int, intgo arg2);
void SwigDirector_ActiveTrackListener::onActiveTrackchanged(uint32_t id) {
  intgo swig_arg2;
  
  swig_arg2 = (uint32_t)id; 
  Swig_DirectorActiveTrackListener_callback_onActiveTrackchanged_native_2ca2fe9cd83b6fb4(go_val, swig_arg2);
}

#ifdef __cplusplus
extern "C" {
#endif

void _wrap_Swig_free_native_2ca2fe9cd83b6fb4(void *_swig_go_0) {
  void *arg1 = (void *) 0 ;
  
  arg1 = *(void **)&_swig_go_0; 
  
  Swig_free(arg1);
  
}


void *_wrap_Swig_malloc_native_2ca2fe9cd83b6fb4(intgo _swig_go_0) {
  int arg1 ;
  void *result = 0 ;
  void *_swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  
  result = (void *)Swig_malloc(arg1);
  *(void **)&_swig_go_result = (void *)result; 
  return _swig_go_result;
}


Acumulator *_wrap_new_Acumulator__SWIG_0_native_2ca2fe9cd83b6fb4(intgo _swig_go_0, intgo _swig_go_1) {
  uint32_t arg1 ;
  uint32_t arg2 ;
  Acumulator *result = 0 ;
  Acumulator *_swig_go_result;
  
  arg1 = (uint32_t)_swig_go_0; 
  arg2 = (uint32_t)_swig_go_1; 
  
  result = (Acumulator *)new Acumulator(arg1,arg2);
  *(Acumulator **)&_swig_go_result = (Acumulator *)result; 
  return _swig_go_result;
}


Acumulator *_wrap_new_Acumulator__SWIG_1_native_2ca2fe9cd83b6fb4(intgo _swig_go_0) {
  uint32_t arg1 ;
  Acumulator *result = 0 ;
  Acumulator *_swig_go_result;
  
  arg1 = (uint32_t)_swig_go_0; 
  
  result = (Acumulator *)new Acumulator(arg1);
  *(Acumulator **)&_swig_go_result = (Acumulator *)result; 
  return _swig_go_result;
}


long long _wrap_Acumulator_GetAcumulated_native_2ca2fe9cd83b6fb4(Acumulator *_swig_go_0) {
  Acumulator *arg1 = (Acumulator *) 0 ;
  uint64_t result;
  long long _swig_go_result;
  
  arg1 = *(Acumulator **)&_swig_go_0; 
  
  result = (uint64_t)((Acumulator const *)arg1)->GetAcumulated();
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_Acumulator_GetDiff_native_2ca2fe9cd83b6fb4(Acumulator *_swig_go_0) {
  Acumulator *arg1 = (Acumulator *) 0 ;
  uint64_t result;
  long long _swig_go_result;
  
  arg1 = *(Acumulator **)&_swig_go_0; 
  
  result = (uint64_t)((Acumulator const *)arg1)->GetDiff();
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_Acumulator_GetInstant_native_2ca2fe9cd83b6fb4(Acumulator *_swig_go_0) {
  Acumulator *arg1 = (Acumulator *) 0 ;
  uint64_t result;
  long long _swig_go_result;
  
  arg1 = *(Acumulator **)&_swig_go_0; 
  
  result = (uint64_t)((Acumulator const *)arg1)->GetInstant();
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_Acumulator_GetMin_native_2ca2fe9cd83b6fb4(Acumulator *_swig_go_0) {
  Acumulator *arg1 = (Acumulator *) 0 ;
  uint64_t result;
  long long _swig_go_result;
  
  arg1 = *(Acumulator **)&_swig_go_0; 
  
  result = (uint64_t)((Acumulator const *)arg1)->GetMin();
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_Acumulator_GetMax_native_2ca2fe9cd83b6fb4(Acumulator *_swig_go_0) {
  Acumulator *arg1 = (Acumulator *) 0 ;
  uint64_t result;
  long long _swig_go_result;
  
  arg1 = *(Acumulator **)&_swig_go_0; 
  
  result = (uint64_t)((Acumulator const *)arg1)->GetMax();
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_Acumulator_GetWindow_native_2ca2fe9cd83b6fb4(Acumulator *_swig_go_0) {
  Acumulator *arg1 = (Acumulator *) 0 ;
  uint32_t result;
  intgo _swig_go_result;
  
  arg1 = *(Acumulator **)&_swig_go_0; 
  
  result = (uint32_t)((Acumulator const *)arg1)->GetWindow();
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_Acumulator_IsInWindow_native_2ca2fe9cd83b6fb4(Acumulator *_swig_go_0) {
  Acumulator *arg1 = (Acumulator *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(Acumulator **)&_swig_go_0; 
  
  result = (bool)((Acumulator const *)arg1)->IsInWindow();
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_Acumulator_IsInMinMaxWindow_native_2ca2fe9cd83b6fb4(Acumulator *_swig_go_0) {
  Acumulator *arg1 = (Acumulator *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(Acumulator **)&_swig_go_0; 
  
  result = (bool)((Acumulator const *)arg1)->IsInMinMaxWindow();
  _swig_go_result = result; 
  return _swig_go_result;
}


long double *_wrap_Acumulator_GetInstantMedia_native_2ca2fe9cd83b6fb4(Acumulator *_swig_go_0) {
  Acumulator *arg1 = (Acumulator *) 0 ;
  long double result;
  long double *_swig_go_result;
  
  arg1 = *(Acumulator **)&_swig_go_0; 
  
  result = (long double)((Acumulator const *)arg1)->GetInstantMedia();
  *(long double **)&_swig_go_result = new long double(result); 
  return _swig_go_result;
}


long double *_wrap_Acumulator_GetInstantAvg_native_2ca2fe9cd83b6fb4(Acumulator *_swig_go_0) {
  Acumulator *arg1 = (Acumulator *) 0 ;
  long double result;
  long double *_swig_go_result;
  
  arg1 = *(Acumulator **)&_swig_go_0; 
  
  result = (long double)((Acumulator const *)arg1)->GetInstantAvg();
  *(long double **)&_swig_go_result = new long double(result); 
  return _swig_go_result;
}


long double *_wrap_Acumulator_GetAverage_native_2ca2fe9cd83b6fb4(Acumulator *_swig_go_0) {
  Acumulator *arg1 = (Acumulator *) 0 ;
  long double result;
  long double *_swig_go_result;
  
  arg1 = *(Acumulator **)&_swig_go_0; 
  
  result = (long double)((Acumulator const *)arg1)->GetAverage();
  *(long double **)&_swig_go_result = new long double(result); 
  return _swig_go_result;
}


long double *_wrap_Acumulator_GetMinAvg_native_2ca2fe9cd83b6fb4(Acumulator *_swig_go_0) {
  Acumulator *arg1 = (Acumulator *) 0 ;
  long double result;
  long double *_swig_go_result;
  
  arg1 = *(Acumulator **)&_swig_go_0; 
  
  result = (long double)((Acumulator const *)arg1)->GetMinAvg();
  *(long double **)&_swig_go_result = new long double(result); 
  return _swig_go_result;
}


long double *_wrap_Acumulator_GetMaxAvg_native_2ca2fe9cd83b6fb4(Acumulator *_swig_go_0) {
  Acumulator *arg1 = (Acumulator *) 0 ;
  long double result;
  long double *_swig_go_result;
  
  arg1 = *(Acumulator **)&_swig_go_0; 
  
  result = (long double)((Acumulator const *)arg1)->GetMaxAvg();
  *(long double **)&_swig_go_result = new long double(result); 
  return _swig_go_result;
}


void _wrap_Acumulator_ResetMinMax_native_2ca2fe9cd83b6fb4(Acumulator *_swig_go_0) {
  Acumulator *arg1 = (Acumulator *) 0 ;
  
  arg1 = *(Acumulator **)&_swig_go_0; 
  
  (arg1)->ResetMinMax();
  
}


void _wrap_Acumulator_Reset_native_2ca2fe9cd83b6fb4(Acumulator *_swig_go_0, long long _swig_go_1) {
  Acumulator *arg1 = (Acumulator *) 0 ;
  uint64_t arg2 ;
  
  arg1 = *(Acumulator **)&_swig_go_0; 
  arg2 = (uint64_t)_swig_go_1; 
  
  (arg1)->Reset(arg2);
  
}


long long _wrap_Acumulator_Update__SWIG_0_native_2ca2fe9cd83b6fb4(Acumulator *_swig_go_0, long long _swig_go_1, intgo _swig_go_2) {
  Acumulator *arg1 = (Acumulator *) 0 ;
  uint64_t arg2 ;
  uint32_t arg3 ;
  uint64_t result;
  long long _swig_go_result;
  
  arg1 = *(Acumulator **)&_swig_go_0; 
  arg2 = (uint64_t)_swig_go_1; 
  arg3 = (uint32_t)_swig_go_2; 
  
  result = (uint64_t)(arg1)->Update(arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_Acumulator_Update__SWIG_1_native_2ca2fe9cd83b6fb4(Acumulator *_swig_go_0, long long _swig_go_1) {
  Acumulator *arg1 = (Acumulator *) 0 ;
  uint64_t arg2 ;
  uint64_t result;
  long long _swig_go_result;
  
  arg1 = *(Acumulator **)&_swig_go_0; 
  arg2 = (uint64_t)_swig_go_1; 
  
  result = (uint64_t)(arg1)->Update(arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_Acumulator_GetMinValueInWindow_native_2ca2fe9cd83b6fb4(Acumulator *_swig_go_0) {
  Acumulator *arg1 = (Acumulator *) 0 ;
  uint32_t result;
  intgo _swig_go_result;
  
  arg1 = *(Acumulator **)&_swig_go_0; 
  
  result = (uint32_t)((Acumulator const *)arg1)->GetMinValueInWindow();
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_Acumulator_GetMaxValueInWindow_native_2ca2fe9cd83b6fb4(Acumulator *_swig_go_0) {
  Acumulator *arg1 = (Acumulator *) 0 ;
  uint32_t result;
  intgo _swig_go_result;
  
  arg1 = *(Acumulator **)&_swig_go_0; 
  
  result = (uint32_t)((Acumulator const *)arg1)->GetMaxValueInWindow();
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_Acumulator_GetCount_native_2ca2fe9cd83b6fb4(Acumulator *_swig_go_0) {
  Acumulator *arg1 = (Acumulator *) 0 ;
  uint32_t result;
  intgo _swig_go_result;
  
  arg1 = *(Acumulator **)&_swig_go_0; 
  
  result = (uint32_t)((Acumulator const *)arg1)->GetCount();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_delete_Acumulator_native_2ca2fe9cd83b6fb4(Acumulator *_swig_go_0) {
  Acumulator *arg1 = (Acumulator *) 0 ;
  
  arg1 = *(Acumulator **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_LayerInfo_MaxLayerId_set_native_2ca2fe9cd83b6fb4(char _swig_go_0) {
  uint8_t arg1 ;
  
  arg1 = (uint8_t)_swig_go_0; 
  
  LayerInfo::MaxLayerId = arg1;
  
}


char _wrap_LayerInfo_MaxLayerId_get_native_2ca2fe9cd83b6fb4() {
  uint8_t result;
  char _swig_go_result;
  
  
  result = (uint8_t)LayerInfo::MaxLayerId;
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_LayerInfo_temporalLayerId_set_native_2ca2fe9cd83b6fb4(LayerInfo *_swig_go_0, char _swig_go_1) {
  LayerInfo *arg1 = (LayerInfo *) 0 ;
  uint8_t arg2 ;
  
  arg1 = *(LayerInfo **)&_swig_go_0; 
  arg2 = (uint8_t)_swig_go_1; 
  
  if (arg1) (arg1)->temporalLayerId = arg2;
  
}


char _wrap_LayerInfo_temporalLayerId_get_native_2ca2fe9cd83b6fb4(LayerInfo *_swig_go_0) {
  LayerInfo *arg1 = (LayerInfo *) 0 ;
  uint8_t result;
  char _swig_go_result;
  
  arg1 = *(LayerInfo **)&_swig_go_0; 
  
  result = (uint8_t) ((arg1)->temporalLayerId);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_LayerInfo_spatialLayerId_set_native_2ca2fe9cd83b6fb4(LayerInfo *_swig_go_0, char _swig_go_1) {
  LayerInfo *arg1 = (LayerInfo *) 0 ;
  uint8_t arg2 ;
  
  arg1 = *(LayerInfo **)&_swig_go_0; 
  arg2 = (uint8_t)_swig_go_1; 
  
  if (arg1) (arg1)->spatialLayerId = arg2;
  
}


char _wrap_LayerInfo_spatialLayerId_get_native_2ca2fe9cd83b6fb4(LayerInfo *_swig_go_0) {
  LayerInfo *arg1 = (LayerInfo *) 0 ;
  uint8_t result;
  char _swig_go_result;
  
  arg1 = *(LayerInfo **)&_swig_go_0; 
  
  result = (uint8_t) ((arg1)->spatialLayerId);
  _swig_go_result = result; 
  return _swig_go_result;
}


LayerInfo *_wrap_new_LayerInfo_native_2ca2fe9cd83b6fb4() {
  LayerInfo *result = 0 ;
  LayerInfo *_swig_go_result;
  
  
  result = (LayerInfo *)new LayerInfo();
  *(LayerInfo **)&_swig_go_result = (LayerInfo *)result; 
  return _swig_go_result;
}


void _wrap_delete_LayerInfo_native_2ca2fe9cd83b6fb4(LayerInfo *_swig_go_0) {
  LayerInfo *arg1 = (LayerInfo *) 0 ;
  
  arg1 = *(LayerInfo **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_LayerSource_numPackets_set_native_2ca2fe9cd83b6fb4(LayerSource *_swig_go_0, intgo _swig_go_1) {
  LayerSource *arg1 = (LayerSource *) 0 ;
  uint32_t arg2 ;
  
  arg1 = *(LayerSource **)&_swig_go_0; 
  arg2 = (uint32_t)_swig_go_1; 
  
  if (arg1) (arg1)->numPackets = arg2;
  
}


intgo _wrap_LayerSource_numPackets_get_native_2ca2fe9cd83b6fb4(LayerSource *_swig_go_0) {
  LayerSource *arg1 = (LayerSource *) 0 ;
  uint32_t result;
  intgo _swig_go_result;
  
  arg1 = *(LayerSource **)&_swig_go_0; 
  
  result = (uint32_t) ((arg1)->numPackets);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_LayerSource_totalBytes_set_native_2ca2fe9cd83b6fb4(LayerSource *_swig_go_0, intgo _swig_go_1) {
  LayerSource *arg1 = (LayerSource *) 0 ;
  uint32_t arg2 ;
  
  arg1 = *(LayerSource **)&_swig_go_0; 
  arg2 = (uint32_t)_swig_go_1; 
  
  if (arg1) (arg1)->totalBytes = arg2;
  
}


intgo _wrap_LayerSource_totalBytes_get_native_2ca2fe9cd83b6fb4(LayerSource *_swig_go_0) {
  LayerSource *arg1 = (LayerSource *) 0 ;
  uint32_t result;
  intgo _swig_go_result;
  
  arg1 = *(LayerSource **)&_swig_go_0; 
  
  result = (uint32_t) ((arg1)->totalBytes);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_LayerSource_bitrate_set_native_2ca2fe9cd83b6fb4(LayerSource *_swig_go_0, intgo _swig_go_1) {
  LayerSource *arg1 = (LayerSource *) 0 ;
  uint32_t arg2 ;
  
  arg1 = *(LayerSource **)&_swig_go_0; 
  arg2 = (uint32_t)_swig_go_1; 
  
  if (arg1) (arg1)->bitrate = arg2;
  
}


intgo _wrap_LayerSource_bitrate_get_native_2ca2fe9cd83b6fb4(LayerSource *_swig_go_0) {
  LayerSource *arg1 = (LayerSource *) 0 ;
  uint32_t result;
  intgo _swig_go_result;
  
  arg1 = *(LayerSource **)&_swig_go_0; 
  
  result = (uint32_t) ((arg1)->bitrate);
  _swig_go_result = result; 
  return _swig_go_result;
}


LayerSource *_wrap_new_LayerSource_native_2ca2fe9cd83b6fb4() {
  LayerSource *result = 0 ;
  LayerSource *_swig_go_result;
  
  
  result = (LayerSource *)new LayerSource();
  *(LayerSource **)&_swig_go_result = (LayerSource *)result; 
  return _swig_go_result;
}


void _wrap_delete_LayerSource_native_2ca2fe9cd83b6fb4(LayerSource *_swig_go_0) {
  LayerSource *arg1 = (LayerSource *) 0 ;
  
  arg1 = *(LayerSource **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_SetLayerSource_TemporalLayerId_native_2ca2fe9cd83b6fb4(LayerSource *_swig_go_0, char _swig_go_1) {
  LayerSource *arg1 = (LayerSource *) 0 ;
  uint8_t arg2 ;
  
  arg1 = *(LayerSource **)&_swig_go_0; 
  arg2 = (uint8_t)_swig_go_1; 
  
  LayerInfo *swig_b0 = (LayerInfo *)arg1;
  if (swig_b0) (swig_b0)->temporalLayerId = arg2;
  
}


char _wrap_GetLayerSource_TemporalLayerId_native_2ca2fe9cd83b6fb4(LayerSource *_swig_go_0) {
  LayerSource *arg1 = (LayerSource *) 0 ;
  uint8_t result;
  char _swig_go_result;
  
  arg1 = *(LayerSource **)&_swig_go_0; 
  
  LayerInfo *swig_b0 = (LayerInfo *)arg1;
  result = (uint8_t) ((swig_b0)->temporalLayerId);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_SetLayerSource_SpatialLayerId_native_2ca2fe9cd83b6fb4(LayerSource *_swig_go_0, char _swig_go_1) {
  LayerSource *arg1 = (LayerSource *) 0 ;
  uint8_t arg2 ;
  
  arg1 = *(LayerSource **)&_swig_go_0; 
  arg2 = (uint8_t)_swig_go_1; 
  
  LayerInfo *swig_b0 = (LayerInfo *)arg1;
  if (swig_b0) (swig_b0)->spatialLayerId = arg2;
  
}


char _wrap_GetLayerSource_SpatialLayerId_native_2ca2fe9cd83b6fb4(LayerSource *_swig_go_0) {
  LayerSource *arg1 = (LayerSource *) 0 ;
  uint8_t result;
  char _swig_go_result;
  
  arg1 = *(LayerSource **)&_swig_go_0; 
  
  LayerInfo *swig_b0 = (LayerInfo *)arg1;
  result = (uint8_t) ((swig_b0)->spatialLayerId);
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_LayerSources_size_native_2ca2fe9cd83b6fb4(LayerSources *_swig_go_0) {
  LayerSources *arg1 = (LayerSources *) 0 ;
  size_t result;
  long long _swig_go_result;
  
  arg1 = *(LayerSources **)&_swig_go_0; 
  
  result = ((LayerSources const *)arg1)->size();
  _swig_go_result = result; 
  return _swig_go_result;
}


LayerSource *_wrap_LayerSources_get_native_2ca2fe9cd83b6fb4(LayerSources *_swig_go_0, long long _swig_go_1) {
  LayerSources *arg1 = (LayerSources *) 0 ;
  size_t arg2 ;
  LayerSource *result = 0 ;
  LayerSource *_swig_go_result;
  
  arg1 = *(LayerSources **)&_swig_go_0; 
  arg2 = (size_t)_swig_go_1; 
  
  result = (LayerSource *)(arg1)->get(arg2);
  *(LayerSource **)&_swig_go_result = (LayerSource *)result; 
  return _swig_go_result;
}


LayerSources *_wrap_new_LayerSources_native_2ca2fe9cd83b6fb4() {
  LayerSources *result = 0 ;
  LayerSources *_swig_go_result;
  
  
  result = (LayerSources *)new LayerSources();
  *(LayerSources **)&_swig_go_result = (LayerSources *)result; 
  return _swig_go_result;
}


void _wrap_delete_LayerSources_native_2ca2fe9cd83b6fb4(LayerSources *_swig_go_0) {
  LayerSources *arg1 = (LayerSources *) 0 ;
  
  arg1 = *(LayerSources **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_RTPSource_ssrc_set_native_2ca2fe9cd83b6fb4(RTPSource *_swig_go_0, intgo _swig_go_1) {
  RTPSource *arg1 = (RTPSource *) 0 ;
  uint32_t arg2 ;
  
  arg1 = *(RTPSource **)&_swig_go_0; 
  arg2 = (uint32_t)_swig_go_1; 
  
  if (arg1) (arg1)->ssrc = arg2;
  
}


intgo _wrap_RTPSource_ssrc_get_native_2ca2fe9cd83b6fb4(RTPSource *_swig_go_0) {
  RTPSource *arg1 = (RTPSource *) 0 ;
  uint32_t result;
  intgo _swig_go_result;
  
  arg1 = *(RTPSource **)&_swig_go_0; 
  
  result = (uint32_t) ((arg1)->ssrc);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_RTPSource_extSeqNum_set_native_2ca2fe9cd83b6fb4(RTPSource *_swig_go_0, intgo _swig_go_1) {
  RTPSource *arg1 = (RTPSource *) 0 ;
  uint32_t arg2 ;
  
  arg1 = *(RTPSource **)&_swig_go_0; 
  arg2 = (uint32_t)_swig_go_1; 
  
  if (arg1) (arg1)->extSeqNum = arg2;
  
}


intgo _wrap_RTPSource_extSeqNum_get_native_2ca2fe9cd83b6fb4(RTPSource *_swig_go_0) {
  RTPSource *arg1 = (RTPSource *) 0 ;
  uint32_t result;
  intgo _swig_go_result;
  
  arg1 = *(RTPSource **)&_swig_go_0; 
  
  result = (uint32_t) ((arg1)->extSeqNum);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_RTPSource_cycles_set_native_2ca2fe9cd83b6fb4(RTPSource *_swig_go_0, intgo _swig_go_1) {
  RTPSource *arg1 = (RTPSource *) 0 ;
  uint32_t arg2 ;
  
  arg1 = *(RTPSource **)&_swig_go_0; 
  arg2 = (uint32_t)_swig_go_1; 
  
  if (arg1) (arg1)->cycles = arg2;
  
}


intgo _wrap_RTPSource_cycles_get_native_2ca2fe9cd83b6fb4(RTPSource *_swig_go_0) {
  RTPSource *arg1 = (RTPSource *) 0 ;
  uint32_t result;
  intgo _swig_go_result;
  
  arg1 = *(RTPSource **)&_swig_go_0; 
  
  result = (uint32_t) ((arg1)->cycles);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_RTPSource_jitter_set_native_2ca2fe9cd83b6fb4(RTPSource *_swig_go_0, intgo _swig_go_1) {
  RTPSource *arg1 = (RTPSource *) 0 ;
  uint32_t arg2 ;
  
  arg1 = *(RTPSource **)&_swig_go_0; 
  arg2 = (uint32_t)_swig_go_1; 
  
  if (arg1) (arg1)->jitter = arg2;
  
}


intgo _wrap_RTPSource_jitter_get_native_2ca2fe9cd83b6fb4(RTPSource *_swig_go_0) {
  RTPSource *arg1 = (RTPSource *) 0 ;
  uint32_t result;
  intgo _swig_go_result;
  
  arg1 = *(RTPSource **)&_swig_go_0; 
  
  result = (uint32_t) ((arg1)->jitter);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_RTPSource_numPackets_set_native_2ca2fe9cd83b6fb4(RTPSource *_swig_go_0, intgo _swig_go_1) {
  RTPSource *arg1 = (RTPSource *) 0 ;
  uint32_t arg2 ;
  
  arg1 = *(RTPSource **)&_swig_go_0; 
  arg2 = (uint32_t)_swig_go_1; 
  
  if (arg1) (arg1)->numPackets = arg2;
  
}


intgo _wrap_RTPSource_numPackets_get_native_2ca2fe9cd83b6fb4(RTPSource *_swig_go_0) {
  RTPSource *arg1 = (RTPSource *) 0 ;
  uint32_t result;
  intgo _swig_go_result;
  
  arg1 = *(RTPSource **)&_swig_go_0; 
  
  result = (uint32_t) ((arg1)->numPackets);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_RTPSource_numRTCPPackets_set_native_2ca2fe9cd83b6fb4(RTPSource *_swig_go_0, intgo _swig_go_1) {
  RTPSource *arg1 = (RTPSource *) 0 ;
  uint32_t arg2 ;
  
  arg1 = *(RTPSource **)&_swig_go_0; 
  arg2 = (uint32_t)_swig_go_1; 
  
  if (arg1) (arg1)->numRTCPPackets = arg2;
  
}


intgo _wrap_RTPSource_numRTCPPackets_get_native_2ca2fe9cd83b6fb4(RTPSource *_swig_go_0) {
  RTPSource *arg1 = (RTPSource *) 0 ;
  uint32_t result;
  intgo _swig_go_result;
  
  arg1 = *(RTPSource **)&_swig_go_0; 
  
  result = (uint32_t) ((arg1)->numRTCPPackets);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_RTPSource_totalBytes_set_native_2ca2fe9cd83b6fb4(RTPSource *_swig_go_0, intgo _swig_go_1) {
  RTPSource *arg1 = (RTPSource *) 0 ;
  uint32_t arg2 ;
  
  arg1 = *(RTPSource **)&_swig_go_0; 
  arg2 = (uint32_t)_swig_go_1; 
  
  if (arg1) (arg1)->totalBytes = arg2;
  
}


intgo _wrap_RTPSource_totalBytes_get_native_2ca2fe9cd83b6fb4(RTPSource *_swig_go_0) {
  RTPSource *arg1 = (RTPSource *) 0 ;
  uint32_t result;
  intgo _swig_go_result;
  
  arg1 = *(RTPSource **)&_swig_go_0; 
  
  result = (uint32_t) ((arg1)->totalBytes);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_RTPSource_totalRTCPBytes_set_native_2ca2fe9cd83b6fb4(RTPSource *_swig_go_0, intgo _swig_go_1) {
  RTPSource *arg1 = (RTPSource *) 0 ;
  uint32_t arg2 ;
  
  arg1 = *(RTPSource **)&_swig_go_0; 
  arg2 = (uint32_t)_swig_go_1; 
  
  if (arg1) (arg1)->totalRTCPBytes = arg2;
  
}


intgo _wrap_RTPSource_totalRTCPBytes_get_native_2ca2fe9cd83b6fb4(RTPSource *_swig_go_0) {
  RTPSource *arg1 = (RTPSource *) 0 ;
  uint32_t result;
  intgo _swig_go_result;
  
  arg1 = *(RTPSource **)&_swig_go_0; 
  
  result = (uint32_t) ((arg1)->totalRTCPBytes);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_RTPSource_bitrate_set_native_2ca2fe9cd83b6fb4(RTPSource *_swig_go_0, intgo _swig_go_1) {
  RTPSource *arg1 = (RTPSource *) 0 ;
  uint32_t arg2 ;
  
  arg1 = *(RTPSource **)&_swig_go_0; 
  arg2 = (uint32_t)_swig_go_1; 
  
  if (arg1) (arg1)->bitrate = arg2;
  
}


intgo _wrap_RTPSource_bitrate_get_native_2ca2fe9cd83b6fb4(RTPSource *_swig_go_0) {
  RTPSource *arg1 = (RTPSource *) 0 ;
  uint32_t result;
  intgo _swig_go_result;
  
  arg1 = *(RTPSource **)&_swig_go_0; 
  
  result = (uint32_t) ((arg1)->bitrate);
  _swig_go_result = result; 
  return _swig_go_result;
}


RTPSource *_wrap_new_RTPSource_native_2ca2fe9cd83b6fb4() {
  RTPSource *result = 0 ;
  RTPSource *_swig_go_result;
  
  
  result = (RTPSource *)new RTPSource();
  *(RTPSource **)&_swig_go_result = (RTPSource *)result; 
  return _swig_go_result;
}


void _wrap_delete_RTPSource_native_2ca2fe9cd83b6fb4(RTPSource *_swig_go_0) {
  RTPSource *arg1 = (RTPSource *) 0 ;
  
  arg1 = *(RTPSource **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_RTPIncomingSource_lostPackets_set_native_2ca2fe9cd83b6fb4(RTPIncomingSource *_swig_go_0, intgo _swig_go_1) {
  RTPIncomingSource *arg1 = (RTPIncomingSource *) 0 ;
  uint32_t arg2 ;
  
  arg1 = *(RTPIncomingSource **)&_swig_go_0; 
  arg2 = (uint32_t)_swig_go_1; 
  
  if (arg1) (arg1)->lostPackets = arg2;
  
}


intgo _wrap_RTPIncomingSource_lostPackets_get_native_2ca2fe9cd83b6fb4(RTPIncomingSource *_swig_go_0) {
  RTPIncomingSource *arg1 = (RTPIncomingSource *) 0 ;
  uint32_t result;
  intgo _swig_go_result;
  
  arg1 = *(RTPIncomingSource **)&_swig_go_0; 
  
  result = (uint32_t) ((arg1)->lostPackets);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_RTPIncomingSource_dropPackets_set_native_2ca2fe9cd83b6fb4(RTPIncomingSource *_swig_go_0, intgo _swig_go_1) {
  RTPIncomingSource *arg1 = (RTPIncomingSource *) 0 ;
  uint32_t arg2 ;
  
  arg1 = *(RTPIncomingSource **)&_swig_go_0; 
  arg2 = (uint32_t)_swig_go_1; 
  
  if (arg1) (arg1)->dropPackets = arg2;
  
}


intgo _wrap_RTPIncomingSource_dropPackets_get_native_2ca2fe9cd83b6fb4(RTPIncomingSource *_swig_go_0) {
  RTPIncomingSource *arg1 = (RTPIncomingSource *) 0 ;
  uint32_t result;
  intgo _swig_go_result;
  
  arg1 = *(RTPIncomingSource **)&_swig_go_0; 
  
  result = (uint32_t) ((arg1)->dropPackets);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_RTPIncomingSource_totalPacketsSinceLastSR_set_native_2ca2fe9cd83b6fb4(RTPIncomingSource *_swig_go_0, intgo _swig_go_1) {
  RTPIncomingSource *arg1 = (RTPIncomingSource *) 0 ;
  uint32_t arg2 ;
  
  arg1 = *(RTPIncomingSource **)&_swig_go_0; 
  arg2 = (uint32_t)_swig_go_1; 
  
  if (arg1) (arg1)->totalPacketsSinceLastSR = arg2;
  
}


intgo _wrap_RTPIncomingSource_totalPacketsSinceLastSR_get_native_2ca2fe9cd83b6fb4(RTPIncomingSource *_swig_go_0) {
  RTPIncomingSource *arg1 = (RTPIncomingSource *) 0 ;
  uint32_t result;
  intgo _swig_go_result;
  
  arg1 = *(RTPIncomingSource **)&_swig_go_0; 
  
  result = (uint32_t) ((arg1)->totalPacketsSinceLastSR);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_RTPIncomingSource_totalBytesSinceLastSR_set_native_2ca2fe9cd83b6fb4(RTPIncomingSource *_swig_go_0, intgo _swig_go_1) {
  RTPIncomingSource *arg1 = (RTPIncomingSource *) 0 ;
  uint32_t arg2 ;
  
  arg1 = *(RTPIncomingSource **)&_swig_go_0; 
  arg2 = (uint32_t)_swig_go_1; 
  
  if (arg1) (arg1)->totalBytesSinceLastSR = arg2;
  
}


intgo _wrap_RTPIncomingSource_totalBytesSinceLastSR_get_native_2ca2fe9cd83b6fb4(RTPIncomingSource *_swig_go_0) {
  RTPIncomingSource *arg1 = (RTPIncomingSource *) 0 ;
  uint32_t result;
  intgo _swig_go_result;
  
  arg1 = *(RTPIncomingSource **)&_swig_go_0; 
  
  result = (uint32_t) ((arg1)->totalBytesSinceLastSR);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_RTPIncomingSource_minExtSeqNumSinceLastSR_set_native_2ca2fe9cd83b6fb4(RTPIncomingSource *_swig_go_0, intgo _swig_go_1) {
  RTPIncomingSource *arg1 = (RTPIncomingSource *) 0 ;
  uint32_t arg2 ;
  
  arg1 = *(RTPIncomingSource **)&_swig_go_0; 
  arg2 = (uint32_t)_swig_go_1; 
  
  if (arg1) (arg1)->minExtSeqNumSinceLastSR = arg2;
  
}


intgo _wrap_RTPIncomingSource_minExtSeqNumSinceLastSR_get_native_2ca2fe9cd83b6fb4(RTPIncomingSource *_swig_go_0) {
  RTPIncomingSource *arg1 = (RTPIncomingSource *) 0 ;
  uint32_t result;
  intgo _swig_go_result;
  
  arg1 = *(RTPIncomingSource **)&_swig_go_0; 
  
  result = (uint32_t) ((arg1)->minExtSeqNumSinceLastSR);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_RTPIncomingSource_lostPacketsSinceLastSR_set_native_2ca2fe9cd83b6fb4(RTPIncomingSource *_swig_go_0, intgo _swig_go_1) {
  RTPIncomingSource *arg1 = (RTPIncomingSource *) 0 ;
  uint32_t arg2 ;
  
  arg1 = *(RTPIncomingSource **)&_swig_go_0; 
  arg2 = (uint32_t)_swig_go_1; 
  
  if (arg1) (arg1)->lostPacketsSinceLastSR = arg2;
  
}


intgo _wrap_RTPIncomingSource_lostPacketsSinceLastSR_get_native_2ca2fe9cd83b6fb4(RTPIncomingSource *_swig_go_0) {
  RTPIncomingSource *arg1 = (RTPIncomingSource *) 0 ;
  uint32_t result;
  intgo _swig_go_result;
  
  arg1 = *(RTPIncomingSource **)&_swig_go_0; 
  
  result = (uint32_t) ((arg1)->lostPacketsSinceLastSR);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_RTPIncomingSource_lastReceivedSenderNTPTimestamp_set_native_2ca2fe9cd83b6fb4(RTPIncomingSource *_swig_go_0, long long _swig_go_1) {
  RTPIncomingSource *arg1 = (RTPIncomingSource *) 0 ;
  uint64_t arg2 ;
  
  arg1 = *(RTPIncomingSource **)&_swig_go_0; 
  arg2 = (uint64_t)_swig_go_1; 
  
  if (arg1) (arg1)->lastReceivedSenderNTPTimestamp = arg2;
  
}


long long _wrap_RTPIncomingSource_lastReceivedSenderNTPTimestamp_get_native_2ca2fe9cd83b6fb4(RTPIncomingSource *_swig_go_0) {
  RTPIncomingSource *arg1 = (RTPIncomingSource *) 0 ;
  uint64_t result;
  long long _swig_go_result;
  
  arg1 = *(RTPIncomingSource **)&_swig_go_0; 
  
  result = (uint64_t) ((arg1)->lastReceivedSenderNTPTimestamp);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_RTPIncomingSource_lastReceivedSenderReport_set_native_2ca2fe9cd83b6fb4(RTPIncomingSource *_swig_go_0, long long _swig_go_1) {
  RTPIncomingSource *arg1 = (RTPIncomingSource *) 0 ;
  uint64_t arg2 ;
  
  arg1 = *(RTPIncomingSource **)&_swig_go_0; 
  arg2 = (uint64_t)_swig_go_1; 
  
  if (arg1) (arg1)->lastReceivedSenderReport = arg2;
  
}


long long _wrap_RTPIncomingSource_lastReceivedSenderReport_get_native_2ca2fe9cd83b6fb4(RTPIncomingSource *_swig_go_0) {
  RTPIncomingSource *arg1 = (RTPIncomingSource *) 0 ;
  uint64_t result;
  long long _swig_go_result;
  
  arg1 = *(RTPIncomingSource **)&_swig_go_0; 
  
  result = (uint64_t) ((arg1)->lastReceivedSenderReport);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_RTPIncomingSource_lastReport_set_native_2ca2fe9cd83b6fb4(RTPIncomingSource *_swig_go_0, long long _swig_go_1) {
  RTPIncomingSource *arg1 = (RTPIncomingSource *) 0 ;
  uint64_t arg2 ;
  
  arg1 = *(RTPIncomingSource **)&_swig_go_0; 
  arg2 = (uint64_t)_swig_go_1; 
  
  if (arg1) (arg1)->lastReport = arg2;
  
}


long long _wrap_RTPIncomingSource_lastReport_get_native_2ca2fe9cd83b6fb4(RTPIncomingSource *_swig_go_0) {
  RTPIncomingSource *arg1 = (RTPIncomingSource *) 0 ;
  uint64_t result;
  long long _swig_go_result;
  
  arg1 = *(RTPIncomingSource **)&_swig_go_0; 
  
  result = (uint64_t) ((arg1)->lastReport);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_RTPIncomingSource_lastPLI_set_native_2ca2fe9cd83b6fb4(RTPIncomingSource *_swig_go_0, long long _swig_go_1) {
  RTPIncomingSource *arg1 = (RTPIncomingSource *) 0 ;
  uint64_t arg2 ;
  
  arg1 = *(RTPIncomingSource **)&_swig_go_0; 
  arg2 = (uint64_t)_swig_go_1; 
  
  if (arg1) (arg1)->lastPLI = arg2;
  
}


long long _wrap_RTPIncomingSource_lastPLI_get_native_2ca2fe9cd83b6fb4(RTPIncomingSource *_swig_go_0) {
  RTPIncomingSource *arg1 = (RTPIncomingSource *) 0 ;
  uint64_t result;
  long long _swig_go_result;
  
  arg1 = *(RTPIncomingSource **)&_swig_go_0; 
  
  result = (uint64_t) ((arg1)->lastPLI);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_RTPIncomingSource_totalPLIs_set_native_2ca2fe9cd83b6fb4(RTPIncomingSource *_swig_go_0, intgo _swig_go_1) {
  RTPIncomingSource *arg1 = (RTPIncomingSource *) 0 ;
  uint32_t arg2 ;
  
  arg1 = *(RTPIncomingSource **)&_swig_go_0; 
  arg2 = (uint32_t)_swig_go_1; 
  
  if (arg1) (arg1)->totalPLIs = arg2;
  
}


intgo _wrap_RTPIncomingSource_totalPLIs_get_native_2ca2fe9cd83b6fb4(RTPIncomingSource *_swig_go_0) {
  RTPIncomingSource *arg1 = (RTPIncomingSource *) 0 ;
  uint32_t result;
  intgo _swig_go_result;
  
  arg1 = *(RTPIncomingSource **)&_swig_go_0; 
  
  result = (uint32_t) ((arg1)->totalPLIs);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_RTPIncomingSource_totalNACKs_set_native_2ca2fe9cd83b6fb4(RTPIncomingSource *_swig_go_0, intgo _swig_go_1) {
  RTPIncomingSource *arg1 = (RTPIncomingSource *) 0 ;
  uint32_t arg2 ;
  
  arg1 = *(RTPIncomingSource **)&_swig_go_0; 
  arg2 = (uint32_t)_swig_go_1; 
  
  if (arg1) (arg1)->totalNACKs = arg2;
  
}


intgo _wrap_RTPIncomingSource_totalNACKs_get_native_2ca2fe9cd83b6fb4(RTPIncomingSource *_swig_go_0) {
  RTPIncomingSource *arg1 = (RTPIncomingSource *) 0 ;
  uint32_t result;
  intgo _swig_go_result;
  
  arg1 = *(RTPIncomingSource **)&_swig_go_0; 
  
  result = (uint32_t) ((arg1)->totalNACKs);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_RTPIncomingSource_lastNACKed_set_native_2ca2fe9cd83b6fb4(RTPIncomingSource *_swig_go_0, long long _swig_go_1) {
  RTPIncomingSource *arg1 = (RTPIncomingSource *) 0 ;
  uint64_t arg2 ;
  
  arg1 = *(RTPIncomingSource **)&_swig_go_0; 
  arg2 = (uint64_t)_swig_go_1; 
  
  if (arg1) (arg1)->lastNACKed = arg2;
  
}


long long _wrap_RTPIncomingSource_lastNACKed_get_native_2ca2fe9cd83b6fb4(RTPIncomingSource *_swig_go_0) {
  RTPIncomingSource *arg1 = (RTPIncomingSource *) 0 ;
  uint64_t result;
  long long _swig_go_result;
  
  arg1 = *(RTPIncomingSource **)&_swig_go_0; 
  
  result = (uint64_t) ((arg1)->lastNACKed);
  _swig_go_result = result; 
  return _swig_go_result;
}


LayerSources *_wrap_RTPIncomingSource_layers_native_2ca2fe9cd83b6fb4(RTPIncomingSource *_swig_go_0) {
  RTPIncomingSource *arg1 = (RTPIncomingSource *) 0 ;
  LayerSources result;
  LayerSources *_swig_go_result;
  
  arg1 = *(RTPIncomingSource **)&_swig_go_0; 
  
  result = RTPIncomingSource_layers(arg1);
  *(LayerSources **)&_swig_go_result = new LayerSources(result); 
  return _swig_go_result;
}


RTPIncomingSource *_wrap_new_RTPIncomingSource_native_2ca2fe9cd83b6fb4() {
  RTPIncomingSource *result = 0 ;
  RTPIncomingSource *_swig_go_result;
  
  
  result = (RTPIncomingSource *)new RTPIncomingSource();
  *(RTPIncomingSource **)&_swig_go_result = (RTPIncomingSource *)result; 
  return _swig_go_result;
}


void _wrap_delete_RTPIncomingSource_native_2ca2fe9cd83b6fb4(RTPIncomingSource *_swig_go_0) {
  RTPIncomingSource *arg1 = (RTPIncomingSource *) 0 ;
  
  arg1 = *(RTPIncomingSource **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_SetRTPIncomingSource_Ssrc_native_2ca2fe9cd83b6fb4(RTPIncomingSource *_swig_go_0, intgo _swig_go_1) {
  RTPIncomingSource *arg1 = (RTPIncomingSource *) 0 ;
  uint32_t arg2 ;
  
  arg1 = *(RTPIncomingSource **)&_swig_go_0; 
  arg2 = (uint32_t)_swig_go_1; 
  
  RTPSource *swig_b0 = (RTPSource *)arg1;
  if (swig_b0) (swig_b0)->ssrc = arg2;
  
}


intgo _wrap_GetRTPIncomingSource_Ssrc_native_2ca2fe9cd83b6fb4(RTPIncomingSource *_swig_go_0) {
  RTPIncomingSource *arg1 = (RTPIncomingSource *) 0 ;
  uint32_t result;
  intgo _swig_go_result;
  
  arg1 = *(RTPIncomingSource **)&_swig_go_0; 
  
  RTPSource *swig_b0 = (RTPSource *)arg1;
  result = (uint32_t) ((swig_b0)->ssrc);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_SetRTPIncomingSource_ExtSeqNum_native_2ca2fe9cd83b6fb4(RTPIncomingSource *_swig_go_0, intgo _swig_go_1) {
  RTPIncomingSource *arg1 = (RTPIncomingSource *) 0 ;
  uint32_t arg2 ;
  
  arg1 = *(RTPIncomingSource **)&_swig_go_0; 
  arg2 = (uint32_t)_swig_go_1; 
  
  RTPSource *swig_b0 = (RTPSource *)arg1;
  if (swig_b0) (swig_b0)->extSeqNum = arg2;
  
}


intgo _wrap_GetRTPIncomingSource_ExtSeqNum_native_2ca2fe9cd83b6fb4(RTPIncomingSource *_swig_go_0) {
  RTPIncomingSource *arg1 = (RTPIncomingSource *) 0 ;
  uint32_t result;
  intgo _swig_go_result;
  
  arg1 = *(RTPIncomingSource **)&_swig_go_0; 
  
  RTPSource *swig_b0 = (RTPSource *)arg1;
  result = (uint32_t) ((swig_b0)->extSeqNum);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_SetRTPIncomingSource_Cycles_native_2ca2fe9cd83b6fb4(RTPIncomingSource *_swig_go_0, intgo _swig_go_1) {
  RTPIncomingSource *arg1 = (RTPIncomingSource *) 0 ;
  uint32_t arg2 ;
  
  arg1 = *(RTPIncomingSource **)&_swig_go_0; 
  arg2 = (uint32_t)_swig_go_1; 
  
  RTPSource *swig_b0 = (RTPSource *)arg1;
  if (swig_b0) (swig_b0)->cycles = arg2;
  
}


intgo _wrap_GetRTPIncomingSource_Cycles_native_2ca2fe9cd83b6fb4(RTPIncomingSource *_swig_go_0) {
  RTPIncomingSource *arg1 = (RTPIncomingSource *) 0 ;
  uint32_t result;
  intgo _swig_go_result;
  
  arg1 = *(RTPIncomingSource **)&_swig_go_0; 
  
  RTPSource *swig_b0 = (RTPSource *)arg1;
  result = (uint32_t) ((swig_b0)->cycles);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_SetRTPIncomingSource_Jitter_native_2ca2fe9cd83b6fb4(RTPIncomingSource *_swig_go_0, intgo _swig_go_1) {
  RTPIncomingSource *arg1 = (RTPIncomingSource *) 0 ;
  uint32_t arg2 ;
  
  arg1 = *(RTPIncomingSource **)&_swig_go_0; 
  arg2 = (uint32_t)_swig_go_1; 
  
  RTPSource *swig_b0 = (RTPSource *)arg1;
  if (swig_b0) (swig_b0)->jitter = arg2;
  
}


intgo _wrap_GetRTPIncomingSource_Jitter_native_2ca2fe9cd83b6fb4(RTPIncomingSource *_swig_go_0) {
  RTPIncomingSource *arg1 = (RTPIncomingSource *) 0 ;
  uint32_t result;
  intgo _swig_go_result;
  
  arg1 = *(RTPIncomingSource **)&_swig_go_0; 
  
  RTPSource *swig_b0 = (RTPSource *)arg1;
  result = (uint32_t) ((swig_b0)->jitter);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_SetRTPIncomingSource_NumPackets_native_2ca2fe9cd83b6fb4(RTPIncomingSource *_swig_go_0, intgo _swig_go_1) {
  RTPIncomingSource *arg1 = (RTPIncomingSource *) 0 ;
  uint32_t arg2 ;
  
  arg1 = *(RTPIncomingSource **)&_swig_go_0; 
  arg2 = (uint32_t)_swig_go_1; 
  
  RTPSource *swig_b0 = (RTPSource *)arg1;
  if (swig_b0) (swig_b0)->numPackets = arg2;
  
}


intgo _wrap_GetRTPIncomingSource_NumPackets_native_2ca2fe9cd83b6fb4(RTPIncomingSource *_swig_go_0) {
  RTPIncomingSource *arg1 = (RTPIncomingSource *) 0 ;
  uint32_t result;
  intgo _swig_go_result;
  
  arg1 = *(RTPIncomingSource **)&_swig_go_0; 
  
  RTPSource *swig_b0 = (RTPSource *)arg1;
  result = (uint32_t) ((swig_b0)->numPackets);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_SetRTPIncomingSource_NumRTCPPackets_native_2ca2fe9cd83b6fb4(RTPIncomingSource *_swig_go_0, intgo _swig_go_1) {
  RTPIncomingSource *arg1 = (RTPIncomingSource *) 0 ;
  uint32_t arg2 ;
  
  arg1 = *(RTPIncomingSource **)&_swig_go_0; 
  arg2 = (uint32_t)_swig_go_1; 
  
  RTPSource *swig_b0 = (RTPSource *)arg1;
  if (swig_b0) (swig_b0)->numRTCPPackets = arg2;
  
}


intgo _wrap_GetRTPIncomingSource_NumRTCPPackets_native_2ca2fe9cd83b6fb4(RTPIncomingSource *_swig_go_0) {
  RTPIncomingSource *arg1 = (RTPIncomingSource *) 0 ;
  uint32_t result;
  intgo _swig_go_result;
  
  arg1 = *(RTPIncomingSource **)&_swig_go_0; 
  
  RTPSource *swig_b0 = (RTPSource *)arg1;
  result = (uint32_t) ((swig_b0)->numRTCPPackets);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_SetRTPIncomingSource_TotalBytes_native_2ca2fe9cd83b6fb4(RTPIncomingSource *_swig_go_0, intgo _swig_go_1) {
  RTPIncomingSource *arg1 = (RTPIncomingSource *) 0 ;
  uint32_t arg2 ;
  
  arg1 = *(RTPIncomingSource **)&_swig_go_0; 
  arg2 = (uint32_t)_swig_go_1; 
  
  RTPSource *swig_b0 = (RTPSource *)arg1;
  if (swig_b0) (swig_b0)->totalBytes = arg2;
  
}


intgo _wrap_GetRTPIncomingSource_TotalBytes_native_2ca2fe9cd83b6fb4(RTPIncomingSource *_swig_go_0) {
  RTPIncomingSource *arg1 = (RTPIncomingSource *) 0 ;
  uint32_t result;
  intgo _swig_go_result;
  
  arg1 = *(RTPIncomingSource **)&_swig_go_0; 
  
  RTPSource *swig_b0 = (RTPSource *)arg1;
  result = (uint32_t) ((swig_b0)->totalBytes);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_SetRTPIncomingSource_TotalRTCPBytes_native_2ca2fe9cd83b6fb4(RTPIncomingSource *_swig_go_0, intgo _swig_go_1) {
  RTPIncomingSource *arg1 = (RTPIncomingSource *) 0 ;
  uint32_t arg2 ;
  
  arg1 = *(RTPIncomingSource **)&_swig_go_0; 
  arg2 = (uint32_t)_swig_go_1; 
  
  RTPSource *swig_b0 = (RTPSource *)arg1;
  if (swig_b0) (swig_b0)->totalRTCPBytes = arg2;
  
}


intgo _wrap_GetRTPIncomingSource_TotalRTCPBytes_native_2ca2fe9cd83b6fb4(RTPIncomingSource *_swig_go_0) {
  RTPIncomingSource *arg1 = (RTPIncomingSource *) 0 ;
  uint32_t result;
  intgo _swig_go_result;
  
  arg1 = *(RTPIncomingSource **)&_swig_go_0; 
  
  RTPSource *swig_b0 = (RTPSource *)arg1;
  result = (uint32_t) ((swig_b0)->totalRTCPBytes);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_SetRTPIncomingSource_Bitrate_native_2ca2fe9cd83b6fb4(RTPIncomingSource *_swig_go_0, intgo _swig_go_1) {
  RTPIncomingSource *arg1 = (RTPIncomingSource *) 0 ;
  uint32_t arg2 ;
  
  arg1 = *(RTPIncomingSource **)&_swig_go_0; 
  arg2 = (uint32_t)_swig_go_1; 
  
  RTPSource *swig_b0 = (RTPSource *)arg1;
  if (swig_b0) (swig_b0)->bitrate = arg2;
  
}


intgo _wrap_GetRTPIncomingSource_Bitrate_native_2ca2fe9cd83b6fb4(RTPIncomingSource *_swig_go_0) {
  RTPIncomingSource *arg1 = (RTPIncomingSource *) 0 ;
  uint32_t result;
  intgo _swig_go_result;
  
  arg1 = *(RTPIncomingSource **)&_swig_go_0; 
  
  RTPSource *swig_b0 = (RTPSource *)arg1;
  result = (uint32_t) ((swig_b0)->bitrate);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_RTPOutgoingSource_time_set_native_2ca2fe9cd83b6fb4(RTPOutgoingSource *_swig_go_0, intgo _swig_go_1) {
  RTPOutgoingSource *arg1 = (RTPOutgoingSource *) 0 ;
  uint32_t arg2 ;
  
  arg1 = *(RTPOutgoingSource **)&_swig_go_0; 
  arg2 = (uint32_t)_swig_go_1; 
  
  if (arg1) (arg1)->time = arg2;
  
}


intgo _wrap_RTPOutgoingSource_time_get_native_2ca2fe9cd83b6fb4(RTPOutgoingSource *_swig_go_0) {
  RTPOutgoingSource *arg1 = (RTPOutgoingSource *) 0 ;
  uint32_t result;
  intgo _swig_go_result;
  
  arg1 = *(RTPOutgoingSource **)&_swig_go_0; 
  
  result = (uint32_t) ((arg1)->time);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_RTPOutgoingSource_lastTime_set_native_2ca2fe9cd83b6fb4(RTPOutgoingSource *_swig_go_0, intgo _swig_go_1) {
  RTPOutgoingSource *arg1 = (RTPOutgoingSource *) 0 ;
  uint32_t arg2 ;
  
  arg1 = *(RTPOutgoingSource **)&_swig_go_0; 
  arg2 = (uint32_t)_swig_go_1; 
  
  if (arg1) (arg1)->lastTime = arg2;
  
}


intgo _wrap_RTPOutgoingSource_lastTime_get_native_2ca2fe9cd83b6fb4(RTPOutgoingSource *_swig_go_0) {
  RTPOutgoingSource *arg1 = (RTPOutgoingSource *) 0 ;
  uint32_t result;
  intgo _swig_go_result;
  
  arg1 = *(RTPOutgoingSource **)&_swig_go_0; 
  
  result = (uint32_t) ((arg1)->lastTime);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_RTPOutgoingSource_numPackets_set_native_2ca2fe9cd83b6fb4(RTPOutgoingSource *_swig_go_0, intgo _swig_go_1) {
  RTPOutgoingSource *arg1 = (RTPOutgoingSource *) 0 ;
  uint32_t arg2 ;
  
  arg1 = *(RTPOutgoingSource **)&_swig_go_0; 
  arg2 = (uint32_t)_swig_go_1; 
  
  if (arg1) (arg1)->numPackets = arg2;
  
}


intgo _wrap_RTPOutgoingSource_numPackets_get_native_2ca2fe9cd83b6fb4(RTPOutgoingSource *_swig_go_0) {
  RTPOutgoingSource *arg1 = (RTPOutgoingSource *) 0 ;
  uint32_t result;
  intgo _swig_go_result;
  
  arg1 = *(RTPOutgoingSource **)&_swig_go_0; 
  
  result = (uint32_t) ((arg1)->numPackets);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_RTPOutgoingSource_numRTCPPackets_set_native_2ca2fe9cd83b6fb4(RTPOutgoingSource *_swig_go_0, intgo _swig_go_1) {
  RTPOutgoingSource *arg1 = (RTPOutgoingSource *) 0 ;
  uint32_t arg2 ;
  
  arg1 = *(RTPOutgoingSource **)&_swig_go_0; 
  arg2 = (uint32_t)_swig_go_1; 
  
  if (arg1) (arg1)->numRTCPPackets = arg2;
  
}


intgo _wrap_RTPOutgoingSource_numRTCPPackets_get_native_2ca2fe9cd83b6fb4(RTPOutgoingSource *_swig_go_0) {
  RTPOutgoingSource *arg1 = (RTPOutgoingSource *) 0 ;
  uint32_t result;
  intgo _swig_go_result;
  
  arg1 = *(RTPOutgoingSource **)&_swig_go_0; 
  
  result = (uint32_t) ((arg1)->numRTCPPackets);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_RTPOutgoingSource_totalBytes_set_native_2ca2fe9cd83b6fb4(RTPOutgoingSource *_swig_go_0, intgo _swig_go_1) {
  RTPOutgoingSource *arg1 = (RTPOutgoingSource *) 0 ;
  uint32_t arg2 ;
  
  arg1 = *(RTPOutgoingSource **)&_swig_go_0; 
  arg2 = (uint32_t)_swig_go_1; 
  
  if (arg1) (arg1)->totalBytes = arg2;
  
}


intgo _wrap_RTPOutgoingSource_totalBytes_get_native_2ca2fe9cd83b6fb4(RTPOutgoingSource *_swig_go_0) {
  RTPOutgoingSource *arg1 = (RTPOutgoingSource *) 0 ;
  uint32_t result;
  intgo _swig_go_result;
  
  arg1 = *(RTPOutgoingSource **)&_swig_go_0; 
  
  result = (uint32_t) ((arg1)->totalBytes);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_RTPOutgoingSource_totalRTCPBytes_set_native_2ca2fe9cd83b6fb4(RTPOutgoingSource *_swig_go_0, intgo _swig_go_1) {
  RTPOutgoingSource *arg1 = (RTPOutgoingSource *) 0 ;
  uint32_t arg2 ;
  
  arg1 = *(RTPOutgoingSource **)&_swig_go_0; 
  arg2 = (uint32_t)_swig_go_1; 
  
  if (arg1) (arg1)->totalRTCPBytes = arg2;
  
}


intgo _wrap_RTPOutgoingSource_totalRTCPBytes_get_native_2ca2fe9cd83b6fb4(RTPOutgoingSource *_swig_go_0) {
  RTPOutgoingSource *arg1 = (RTPOutgoingSource *) 0 ;
  uint32_t result;
  intgo _swig_go_result;
  
  arg1 = *(RTPOutgoingSource **)&_swig_go_0; 
  
  result = (uint32_t) ((arg1)->totalRTCPBytes);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_RTPOutgoingSource_lastSenderReport_set_native_2ca2fe9cd83b6fb4(RTPOutgoingSource *_swig_go_0, long long _swig_go_1) {
  RTPOutgoingSource *arg1 = (RTPOutgoingSource *) 0 ;
  uint64_t arg2 ;
  
  arg1 = *(RTPOutgoingSource **)&_swig_go_0; 
  arg2 = (uint64_t)_swig_go_1; 
  
  if (arg1) (arg1)->lastSenderReport = arg2;
  
}


long long _wrap_RTPOutgoingSource_lastSenderReport_get_native_2ca2fe9cd83b6fb4(RTPOutgoingSource *_swig_go_0) {
  RTPOutgoingSource *arg1 = (RTPOutgoingSource *) 0 ;
  uint64_t result;
  long long _swig_go_result;
  
  arg1 = *(RTPOutgoingSource **)&_swig_go_0; 
  
  result = (uint64_t) ((arg1)->lastSenderReport);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_RTPOutgoingSource_lastSenderReportNTP_set_native_2ca2fe9cd83b6fb4(RTPOutgoingSource *_swig_go_0, long long _swig_go_1) {
  RTPOutgoingSource *arg1 = (RTPOutgoingSource *) 0 ;
  uint64_t arg2 ;
  
  arg1 = *(RTPOutgoingSource **)&_swig_go_0; 
  arg2 = (uint64_t)_swig_go_1; 
  
  if (arg1) (arg1)->lastSenderReportNTP = arg2;
  
}


long long _wrap_RTPOutgoingSource_lastSenderReportNTP_get_native_2ca2fe9cd83b6fb4(RTPOutgoingSource *_swig_go_0) {
  RTPOutgoingSource *arg1 = (RTPOutgoingSource *) 0 ;
  uint64_t result;
  long long _swig_go_result;
  
  arg1 = *(RTPOutgoingSource **)&_swig_go_0; 
  
  result = (uint64_t) ((arg1)->lastSenderReportNTP);
  _swig_go_result = result; 
  return _swig_go_result;
}


RTPOutgoingSource *_wrap_new_RTPOutgoingSource_native_2ca2fe9cd83b6fb4() {
  RTPOutgoingSource *result = 0 ;
  RTPOutgoingSource *_swig_go_result;
  
  
  result = (RTPOutgoingSource *)new RTPOutgoingSource();
  *(RTPOutgoingSource **)&_swig_go_result = (RTPOutgoingSource *)result; 
  return _swig_go_result;
}


void _wrap_delete_RTPOutgoingSource_native_2ca2fe9cd83b6fb4(RTPOutgoingSource *_swig_go_0) {
  RTPOutgoingSource *arg1 = (RTPOutgoingSource *) 0 ;
  
  arg1 = *(RTPOutgoingSource **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_SetRTPOutgoingSource_Ssrc_native_2ca2fe9cd83b6fb4(RTPOutgoingSource *_swig_go_0, intgo _swig_go_1) {
  RTPOutgoingSource *arg1 = (RTPOutgoingSource *) 0 ;
  uint32_t arg2 ;
  
  arg1 = *(RTPOutgoingSource **)&_swig_go_0; 
  arg2 = (uint32_t)_swig_go_1; 
  
  RTPSource *swig_b0 = (RTPSource *)arg1;
  if (swig_b0) (swig_b0)->ssrc = arg2;
  
}


intgo _wrap_GetRTPOutgoingSource_Ssrc_native_2ca2fe9cd83b6fb4(RTPOutgoingSource *_swig_go_0) {
  RTPOutgoingSource *arg1 = (RTPOutgoingSource *) 0 ;
  uint32_t result;
  intgo _swig_go_result;
  
  arg1 = *(RTPOutgoingSource **)&_swig_go_0; 
  
  RTPSource *swig_b0 = (RTPSource *)arg1;
  result = (uint32_t) ((swig_b0)->ssrc);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_SetRTPOutgoingSource_ExtSeqNum_native_2ca2fe9cd83b6fb4(RTPOutgoingSource *_swig_go_0, intgo _swig_go_1) {
  RTPOutgoingSource *arg1 = (RTPOutgoingSource *) 0 ;
  uint32_t arg2 ;
  
  arg1 = *(RTPOutgoingSource **)&_swig_go_0; 
  arg2 = (uint32_t)_swig_go_1; 
  
  RTPSource *swig_b0 = (RTPSource *)arg1;
  if (swig_b0) (swig_b0)->extSeqNum = arg2;
  
}


intgo _wrap_GetRTPOutgoingSource_ExtSeqNum_native_2ca2fe9cd83b6fb4(RTPOutgoingSource *_swig_go_0) {
  RTPOutgoingSource *arg1 = (RTPOutgoingSource *) 0 ;
  uint32_t result;
  intgo _swig_go_result;
  
  arg1 = *(RTPOutgoingSource **)&_swig_go_0; 
  
  RTPSource *swig_b0 = (RTPSource *)arg1;
  result = (uint32_t) ((swig_b0)->extSeqNum);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_SetRTPOutgoingSource_Cycles_native_2ca2fe9cd83b6fb4(RTPOutgoingSource *_swig_go_0, intgo _swig_go_1) {
  RTPOutgoingSource *arg1 = (RTPOutgoingSource *) 0 ;
  uint32_t arg2 ;
  
  arg1 = *(RTPOutgoingSource **)&_swig_go_0; 
  arg2 = (uint32_t)_swig_go_1; 
  
  RTPSource *swig_b0 = (RTPSource *)arg1;
  if (swig_b0) (swig_b0)->cycles = arg2;
  
}


intgo _wrap_GetRTPOutgoingSource_Cycles_native_2ca2fe9cd83b6fb4(RTPOutgoingSource *_swig_go_0) {
  RTPOutgoingSource *arg1 = (RTPOutgoingSource *) 0 ;
  uint32_t result;
  intgo _swig_go_result;
  
  arg1 = *(RTPOutgoingSource **)&_swig_go_0; 
  
  RTPSource *swig_b0 = (RTPSource *)arg1;
  result = (uint32_t) ((swig_b0)->cycles);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_SetRTPOutgoingSource_Jitter_native_2ca2fe9cd83b6fb4(RTPOutgoingSource *_swig_go_0, intgo _swig_go_1) {
  RTPOutgoingSource *arg1 = (RTPOutgoingSource *) 0 ;
  uint32_t arg2 ;
  
  arg1 = *(RTPOutgoingSource **)&_swig_go_0; 
  arg2 = (uint32_t)_swig_go_1; 
  
  RTPSource *swig_b0 = (RTPSource *)arg1;
  if (swig_b0) (swig_b0)->jitter = arg2;
  
}


intgo _wrap_GetRTPOutgoingSource_Jitter_native_2ca2fe9cd83b6fb4(RTPOutgoingSource *_swig_go_0) {
  RTPOutgoingSource *arg1 = (RTPOutgoingSource *) 0 ;
  uint32_t result;
  intgo _swig_go_result;
  
  arg1 = *(RTPOutgoingSource **)&_swig_go_0; 
  
  RTPSource *swig_b0 = (RTPSource *)arg1;
  result = (uint32_t) ((swig_b0)->jitter);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_SetRTPOutgoingSource_Bitrate_native_2ca2fe9cd83b6fb4(RTPOutgoingSource *_swig_go_0, intgo _swig_go_1) {
  RTPOutgoingSource *arg1 = (RTPOutgoingSource *) 0 ;
  uint32_t arg2 ;
  
  arg1 = *(RTPOutgoingSource **)&_swig_go_0; 
  arg2 = (uint32_t)_swig_go_1; 
  
  RTPSource *swig_b0 = (RTPSource *)arg1;
  if (swig_b0) (swig_b0)->bitrate = arg2;
  
}


intgo _wrap_GetRTPOutgoingSource_Bitrate_native_2ca2fe9cd83b6fb4(RTPOutgoingSource *_swig_go_0) {
  RTPOutgoingSource *arg1 = (RTPOutgoingSource *) 0 ;
  uint32_t result;
  intgo _swig_go_result;
  
  arg1 = *(RTPOutgoingSource **)&_swig_go_0; 
  
  RTPSource *swig_b0 = (RTPSource *)arg1;
  result = (uint32_t) ((swig_b0)->bitrate);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_delete_TimeService_native_2ca2fe9cd83b6fb4(TimeService *_swig_go_0) {
  TimeService *arg1 = (TimeService *) 0 ;
  
  arg1 = *(TimeService **)&_swig_go_0; 
  
  delete arg1;
  
}


RTPOutgoingSourceGroup *_wrap_new_RTPOutgoingSourceGroup__SWIG_0_native_2ca2fe9cd83b6fb4(intgo _swig_go_0) {
  MediaFrameType arg1 ;
  RTPOutgoingSourceGroup *result = 0 ;
  RTPOutgoingSourceGroup *_swig_go_result;
  
  arg1 = (MediaFrameType)_swig_go_0; 
  
  result = (RTPOutgoingSourceGroup *)new RTPOutgoingSourceGroup(arg1);
  *(RTPOutgoingSourceGroup **)&_swig_go_result = (RTPOutgoingSourceGroup *)result; 
  return _swig_go_result;
}


RTPOutgoingSourceGroup *_wrap_new_RTPOutgoingSourceGroup__SWIG_1_native_2ca2fe9cd83b6fb4(std::string *_swig_go_0, intgo _swig_go_1) {
  std::string *arg1 = 0 ;
  MediaFrameType arg2 ;
  RTPOutgoingSourceGroup *result = 0 ;
  RTPOutgoingSourceGroup *_swig_go_result;
  
  arg1 = *(std::string **)&_swig_go_0; 
  arg2 = (MediaFrameType)_swig_go_1; 
  
  result = (RTPOutgoingSourceGroup *)new RTPOutgoingSourceGroup(*arg1,arg2);
  *(RTPOutgoingSourceGroup **)&_swig_go_result = (RTPOutgoingSourceGroup *)result; 
  return _swig_go_result;
}


void _wrap_RTPOutgoingSourceGroup_Xtype_set_native_2ca2fe9cd83b6fb4(RTPOutgoingSourceGroup *_swig_go_0, intgo _swig_go_1) {
  RTPOutgoingSourceGroup *arg1 = (RTPOutgoingSourceGroup *) 0 ;
  MediaFrameType arg2 ;
  
  arg1 = *(RTPOutgoingSourceGroup **)&_swig_go_0; 
  arg2 = (MediaFrameType)_swig_go_1; 
  
  if (arg1) (arg1)->type = arg2;
  
}


intgo _wrap_RTPOutgoingSourceGroup_Xtype_get_native_2ca2fe9cd83b6fb4(RTPOutgoingSourceGroup *_swig_go_0) {
  RTPOutgoingSourceGroup *arg1 = (RTPOutgoingSourceGroup *) 0 ;
  MediaFrameType result;
  intgo _swig_go_result;
  
  arg1 = *(RTPOutgoingSourceGroup **)&_swig_go_0; 
  
  result = (MediaFrameType) ((arg1)->type);
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


void _wrap_RTPOutgoingSourceGroup_media_set_native_2ca2fe9cd83b6fb4(RTPOutgoingSourceGroup *_swig_go_0, RTPOutgoingSource *_swig_go_1) {
  RTPOutgoingSourceGroup *arg1 = (RTPOutgoingSourceGroup *) 0 ;
  RTPOutgoingSource *arg2 = (RTPOutgoingSource *) 0 ;
  
  arg1 = *(RTPOutgoingSourceGroup **)&_swig_go_0; 
  arg2 = *(RTPOutgoingSource **)&_swig_go_1; 
  
  if (arg1) (arg1)->media = *arg2;
  
}


RTPOutgoingSource *_wrap_RTPOutgoingSourceGroup_media_get_native_2ca2fe9cd83b6fb4(RTPOutgoingSourceGroup *_swig_go_0) {
  RTPOutgoingSourceGroup *arg1 = (RTPOutgoingSourceGroup *) 0 ;
  RTPOutgoingSource *result = 0 ;
  RTPOutgoingSource *_swig_go_result;
  
  arg1 = *(RTPOutgoingSourceGroup **)&_swig_go_0; 
  
  result = (RTPOutgoingSource *)& ((arg1)->media);
  *(RTPOutgoingSource **)&_swig_go_result = (RTPOutgoingSource *)result; 
  return _swig_go_result;
}


void _wrap_RTPOutgoingSourceGroup_fec_set_native_2ca2fe9cd83b6fb4(RTPOutgoingSourceGroup *_swig_go_0, RTPOutgoingSource *_swig_go_1) {
  RTPOutgoingSourceGroup *arg1 = (RTPOutgoingSourceGroup *) 0 ;
  RTPOutgoingSource *arg2 = (RTPOutgoingSource *) 0 ;
  
  arg1 = *(RTPOutgoingSourceGroup **)&_swig_go_0; 
  arg2 = *(RTPOutgoingSource **)&_swig_go_1; 
  
  if (arg1) (arg1)->fec = *arg2;
  
}


RTPOutgoingSource *_wrap_RTPOutgoingSourceGroup_fec_get_native_2ca2fe9cd83b6fb4(RTPOutgoingSourceGroup *_swig_go_0) {
  RTPOutgoingSourceGroup *arg1 = (RTPOutgoingSourceGroup *) 0 ;
  RTPOutgoingSource *result = 0 ;
  RTPOutgoingSource *_swig_go_result;
  
  arg1 = *(RTPOutgoingSourceGroup **)&_swig_go_0; 
  
  result = (RTPOutgoingSource *)& ((arg1)->fec);
  *(RTPOutgoingSource **)&_swig_go_result = (RTPOutgoingSource *)result; 
  return _swig_go_result;
}


void _wrap_RTPOutgoingSourceGroup_rtx_set_native_2ca2fe9cd83b6fb4(RTPOutgoingSourceGroup *_swig_go_0, RTPOutgoingSource *_swig_go_1) {
  RTPOutgoingSourceGroup *arg1 = (RTPOutgoingSourceGroup *) 0 ;
  RTPOutgoingSource *arg2 = (RTPOutgoingSource *) 0 ;
  
  arg1 = *(RTPOutgoingSourceGroup **)&_swig_go_0; 
  arg2 = *(RTPOutgoingSource **)&_swig_go_1; 
  
  if (arg1) (arg1)->rtx = *arg2;
  
}


RTPOutgoingSource *_wrap_RTPOutgoingSourceGroup_rtx_get_native_2ca2fe9cd83b6fb4(RTPOutgoingSourceGroup *_swig_go_0) {
  RTPOutgoingSourceGroup *arg1 = (RTPOutgoingSourceGroup *) 0 ;
  RTPOutgoingSource *result = 0 ;
  RTPOutgoingSource *_swig_go_result;
  
  arg1 = *(RTPOutgoingSourceGroup **)&_swig_go_0; 
  
  result = (RTPOutgoingSource *)& ((arg1)->rtx);
  *(RTPOutgoingSource **)&_swig_go_result = (RTPOutgoingSource *)result; 
  return _swig_go_result;
}


void _wrap_RTPOutgoingSourceGroup_Update_native_2ca2fe9cd83b6fb4(RTPOutgoingSourceGroup *_swig_go_0) {
  RTPOutgoingSourceGroup *arg1 = (RTPOutgoingSourceGroup *) 0 ;
  
  arg1 = *(RTPOutgoingSourceGroup **)&_swig_go_0; 
  
  (arg1)->Update();
  
}


void _wrap_delete_RTPOutgoingSourceGroup_native_2ca2fe9cd83b6fb4(RTPOutgoingSourceGroup *_swig_go_0) {
  RTPOutgoingSourceGroup *arg1 = (RTPOutgoingSourceGroup *) 0 ;
  
  arg1 = *(RTPOutgoingSourceGroup **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_delete_RTPIncomingMediaStreamListener_native_2ca2fe9cd83b6fb4(RTPIncomingMediaStreamListener *_swig_go_0) {
  RTPIncomingMediaStreamListener *arg1 = (RTPIncomingMediaStreamListener *) 0 ;
  
  arg1 = *(RTPIncomingMediaStreamListener **)&_swig_go_0; 
  
  delete arg1;
  
}


RTPIncomingSourceGroup *_wrap_new_RTPIncomingSourceGroup_native_2ca2fe9cd83b6fb4(intgo _swig_go_0, TimeService *_swig_go_1) {
  MediaFrameType arg1 ;
  TimeService *arg2 = 0 ;
  RTPIncomingSourceGroup *result = 0 ;
  RTPIncomingSourceGroup *_swig_go_result;
  
  arg1 = (MediaFrameType)_swig_go_0; 
  arg2 = *(TimeService **)&_swig_go_1; 
  
  result = (RTPIncomingSourceGroup *)new RTPIncomingSourceGroup(arg1,*arg2);
  *(RTPIncomingSourceGroup **)&_swig_go_result = (RTPIncomingSourceGroup *)result; 
  return _swig_go_result;
}


void _wrap_RTPIncomingSourceGroup_rid_set_native_2ca2fe9cd83b6fb4(RTPIncomingSourceGroup *_swig_go_0, _gostring_ _swig_go_1) {
  RTPIncomingSourceGroup *arg1 = (RTPIncomingSourceGroup *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(RTPIncomingSourceGroup **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->rid = *arg2;
  
}


_gostring_ _wrap_RTPIncomingSourceGroup_rid_get_native_2ca2fe9cd83b6fb4(RTPIncomingSourceGroup *_swig_go_0) {
  RTPIncomingSourceGroup *arg1 = (RTPIncomingSourceGroup *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(RTPIncomingSourceGroup **)&_swig_go_0; 
  
  result = (std::string *) & ((arg1)->rid);
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


void _wrap_RTPIncomingSourceGroup_mid_set_native_2ca2fe9cd83b6fb4(RTPIncomingSourceGroup *_swig_go_0, _gostring_ _swig_go_1) {
  RTPIncomingSourceGroup *arg1 = (RTPIncomingSourceGroup *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(RTPIncomingSourceGroup **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->mid = *arg2;
  
}


_gostring_ _wrap_RTPIncomingSourceGroup_mid_get_native_2ca2fe9cd83b6fb4(RTPIncomingSourceGroup *_swig_go_0) {
  RTPIncomingSourceGroup *arg1 = (RTPIncomingSourceGroup *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(RTPIncomingSourceGroup **)&_swig_go_0; 
  
  result = (std::string *) & ((arg1)->mid);
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


void _wrap_RTPIncomingSourceGroup_rtt_set_native_2ca2fe9cd83b6fb4(RTPIncomingSourceGroup *_swig_go_0, intgo _swig_go_1) {
  RTPIncomingSourceGroup *arg1 = (RTPIncomingSourceGroup *) 0 ;
  uint32_t arg2 ;
  
  arg1 = *(RTPIncomingSourceGroup **)&_swig_go_0; 
  arg2 = (uint32_t)_swig_go_1; 
  
  if (arg1) (arg1)->rtt = arg2;
  
}


intgo _wrap_RTPIncomingSourceGroup_rtt_get_native_2ca2fe9cd83b6fb4(RTPIncomingSourceGroup *_swig_go_0) {
  RTPIncomingSourceGroup *arg1 = (RTPIncomingSourceGroup *) 0 ;
  uint32_t result;
  intgo _swig_go_result;
  
  arg1 = *(RTPIncomingSourceGroup **)&_swig_go_0; 
  
  result = (uint32_t) ((arg1)->rtt);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_RTPIncomingSourceGroup_Xtype_set_native_2ca2fe9cd83b6fb4(RTPIncomingSourceGroup *_swig_go_0, intgo _swig_go_1) {
  RTPIncomingSourceGroup *arg1 = (RTPIncomingSourceGroup *) 0 ;
  MediaFrameType arg2 ;
  
  arg1 = *(RTPIncomingSourceGroup **)&_swig_go_0; 
  arg2 = (MediaFrameType)_swig_go_1; 
  
  if (arg1) (arg1)->type = arg2;
  
}


intgo _wrap_RTPIncomingSourceGroup_Xtype_get_native_2ca2fe9cd83b6fb4(RTPIncomingSourceGroup *_swig_go_0) {
  RTPIncomingSourceGroup *arg1 = (RTPIncomingSourceGroup *) 0 ;
  MediaFrameType result;
  intgo _swig_go_result;
  
  arg1 = *(RTPIncomingSourceGroup **)&_swig_go_0; 
  
  result = (MediaFrameType) ((arg1)->type);
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


void _wrap_RTPIncomingSourceGroup_media_set_native_2ca2fe9cd83b6fb4(RTPIncomingSourceGroup *_swig_go_0, RTPIncomingSource *_swig_go_1) {
  RTPIncomingSourceGroup *arg1 = (RTPIncomingSourceGroup *) 0 ;
  RTPIncomingSource *arg2 = (RTPIncomingSource *) 0 ;
  
  arg1 = *(RTPIncomingSourceGroup **)&_swig_go_0; 
  arg2 = *(RTPIncomingSource **)&_swig_go_1; 
  
  if (arg1) (arg1)->media = *arg2;
  
}


RTPIncomingSource *_wrap_RTPIncomingSourceGroup_media_get_native_2ca2fe9cd83b6fb4(RTPIncomingSourceGroup *_swig_go_0) {
  RTPIncomingSourceGroup *arg1 = (RTPIncomingSourceGroup *) 0 ;
  RTPIncomingSource *result = 0 ;
  RTPIncomingSource *_swig_go_result;
  
  arg1 = *(RTPIncomingSourceGroup **)&_swig_go_0; 
  
  result = (RTPIncomingSource *)& ((arg1)->media);
  *(RTPIncomingSource **)&_swig_go_result = (RTPIncomingSource *)result; 
  return _swig_go_result;
}


void _wrap_RTPIncomingSourceGroup_fec_set_native_2ca2fe9cd83b6fb4(RTPIncomingSourceGroup *_swig_go_0, RTPIncomingSource *_swig_go_1) {
  RTPIncomingSourceGroup *arg1 = (RTPIncomingSourceGroup *) 0 ;
  RTPIncomingSource *arg2 = (RTPIncomingSource *) 0 ;
  
  arg1 = *(RTPIncomingSourceGroup **)&_swig_go_0; 
  arg2 = *(RTPIncomingSource **)&_swig_go_1; 
  
  if (arg1) (arg1)->fec = *arg2;
  
}


RTPIncomingSource *_wrap_RTPIncomingSourceGroup_fec_get_native_2ca2fe9cd83b6fb4(RTPIncomingSourceGroup *_swig_go_0) {
  RTPIncomingSourceGroup *arg1 = (RTPIncomingSourceGroup *) 0 ;
  RTPIncomingSource *result = 0 ;
  RTPIncomingSource *_swig_go_result;
  
  arg1 = *(RTPIncomingSourceGroup **)&_swig_go_0; 
  
  result = (RTPIncomingSource *)& ((arg1)->fec);
  *(RTPIncomingSource **)&_swig_go_result = (RTPIncomingSource *)result; 
  return _swig_go_result;
}


void _wrap_RTPIncomingSourceGroup_rtx_set_native_2ca2fe9cd83b6fb4(RTPIncomingSourceGroup *_swig_go_0, RTPIncomingSource *_swig_go_1) {
  RTPIncomingSourceGroup *arg1 = (RTPIncomingSourceGroup *) 0 ;
  RTPIncomingSource *arg2 = (RTPIncomingSource *) 0 ;
  
  arg1 = *(RTPIncomingSourceGroup **)&_swig_go_0; 
  arg2 = *(RTPIncomingSource **)&_swig_go_1; 
  
  if (arg1) (arg1)->rtx = *arg2;
  
}


RTPIncomingSource *_wrap_RTPIncomingSourceGroup_rtx_get_native_2ca2fe9cd83b6fb4(RTPIncomingSourceGroup *_swig_go_0) {
  RTPIncomingSourceGroup *arg1 = (RTPIncomingSourceGroup *) 0 ;
  RTPIncomingSource *result = 0 ;
  RTPIncomingSource *_swig_go_result;
  
  arg1 = *(RTPIncomingSourceGroup **)&_swig_go_0; 
  
  result = (RTPIncomingSource *)& ((arg1)->rtx);
  *(RTPIncomingSource **)&_swig_go_result = (RTPIncomingSource *)result; 
  return _swig_go_result;
}


void _wrap_RTPIncomingSourceGroup_lost_set_native_2ca2fe9cd83b6fb4(RTPIncomingSourceGroup *_swig_go_0, intgo _swig_go_1) {
  RTPIncomingSourceGroup *arg1 = (RTPIncomingSourceGroup *) 0 ;
  uint32_t arg2 ;
  
  arg1 = *(RTPIncomingSourceGroup **)&_swig_go_0; 
  arg2 = (uint32_t)_swig_go_1; 
  
  if (arg1) (arg1)->lost = arg2;
  
}


intgo _wrap_RTPIncomingSourceGroup_lost_get_native_2ca2fe9cd83b6fb4(RTPIncomingSourceGroup *_swig_go_0) {
  RTPIncomingSourceGroup *arg1 = (RTPIncomingSourceGroup *) 0 ;
  uint32_t result;
  intgo _swig_go_result;
  
  arg1 = *(RTPIncomingSourceGroup **)&_swig_go_0; 
  
  result = (uint32_t) ((arg1)->lost);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_RTPIncomingSourceGroup_minWaitedTime_set_native_2ca2fe9cd83b6fb4(RTPIncomingSourceGroup *_swig_go_0, intgo _swig_go_1) {
  RTPIncomingSourceGroup *arg1 = (RTPIncomingSourceGroup *) 0 ;
  uint32_t arg2 ;
  
  arg1 = *(RTPIncomingSourceGroup **)&_swig_go_0; 
  arg2 = (uint32_t)_swig_go_1; 
  
  if (arg1) (arg1)->minWaitedTime = arg2;
  
}


intgo _wrap_RTPIncomingSourceGroup_minWaitedTime_get_native_2ca2fe9cd83b6fb4(RTPIncomingSourceGroup *_swig_go_0) {
  RTPIncomingSourceGroup *arg1 = (RTPIncomingSourceGroup *) 0 ;
  uint32_t result;
  intgo _swig_go_result;
  
  arg1 = *(RTPIncomingSourceGroup **)&_swig_go_0; 
  
  result = (uint32_t) ((arg1)->minWaitedTime);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_RTPIncomingSourceGroup_maxWaitedTime_set_native_2ca2fe9cd83b6fb4(RTPIncomingSourceGroup *_swig_go_0, intgo _swig_go_1) {
  RTPIncomingSourceGroup *arg1 = (RTPIncomingSourceGroup *) 0 ;
  uint32_t arg2 ;
  
  arg1 = *(RTPIncomingSourceGroup **)&_swig_go_0; 
  arg2 = (uint32_t)_swig_go_1; 
  
  if (arg1) (arg1)->maxWaitedTime = arg2;
  
}


intgo _wrap_RTPIncomingSourceGroup_maxWaitedTime_get_native_2ca2fe9cd83b6fb4(RTPIncomingSourceGroup *_swig_go_0) {
  RTPIncomingSourceGroup *arg1 = (RTPIncomingSourceGroup *) 0 ;
  uint32_t result;
  intgo _swig_go_result;
  
  arg1 = *(RTPIncomingSourceGroup **)&_swig_go_0; 
  
  result = (uint32_t) ((arg1)->maxWaitedTime);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_RTPIncomingSourceGroup_avgWaitedTime_set_native_2ca2fe9cd83b6fb4(RTPIncomingSourceGroup *_swig_go_0, double _swig_go_1) {
  RTPIncomingSourceGroup *arg1 = (RTPIncomingSourceGroup *) 0 ;
  double arg2 ;
  
  arg1 = *(RTPIncomingSourceGroup **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  
  if (arg1) (arg1)->avgWaitedTime = arg2;
  
}


double _wrap_RTPIncomingSourceGroup_avgWaitedTime_get_native_2ca2fe9cd83b6fb4(RTPIncomingSourceGroup *_swig_go_0) {
  RTPIncomingSourceGroup *arg1 = (RTPIncomingSourceGroup *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(RTPIncomingSourceGroup **)&_swig_go_0; 
  
  result = (double) ((arg1)->avgWaitedTime);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_RTPIncomingSourceGroup_AddListener_native_2ca2fe9cd83b6fb4(RTPIncomingSourceGroup *_swig_go_0, RTPIncomingMediaStreamListener *_swig_go_1) {
  RTPIncomingSourceGroup *arg1 = (RTPIncomingSourceGroup *) 0 ;
  RTPIncomingMediaStreamListener *arg2 = (RTPIncomingMediaStreamListener *) 0 ;
  
  arg1 = *(RTPIncomingSourceGroup **)&_swig_go_0; 
  arg2 = *(RTPIncomingMediaStreamListener **)&_swig_go_1; 
  
  (arg1)->AddListener(arg2);
  
}


void _wrap_RTPIncomingSourceGroup_RemoveListener_native_2ca2fe9cd83b6fb4(RTPIncomingSourceGroup *_swig_go_0, RTPIncomingMediaStreamListener *_swig_go_1) {
  RTPIncomingSourceGroup *arg1 = (RTPIncomingSourceGroup *) 0 ;
  RTPIncomingMediaStreamListener *arg2 = (RTPIncomingMediaStreamListener *) 0 ;
  
  arg1 = *(RTPIncomingSourceGroup **)&_swig_go_0; 
  arg2 = *(RTPIncomingMediaStreamListener **)&_swig_go_1; 
  
  (arg1)->RemoveListener(arg2);
  
}


void _wrap_RTPIncomingSourceGroup_Update_native_2ca2fe9cd83b6fb4(RTPIncomingSourceGroup *_swig_go_0) {
  RTPIncomingSourceGroup *arg1 = (RTPIncomingSourceGroup *) 0 ;
  
  arg1 = *(RTPIncomingSourceGroup **)&_swig_go_0; 
  
  (arg1)->Update();
  
}


void _wrap_delete_RTPIncomingSourceGroup_native_2ca2fe9cd83b6fb4(RTPIncomingSourceGroup *_swig_go_0) {
  RTPIncomingSourceGroup *arg1 = (RTPIncomingSourceGroup *) 0 ;
  
  arg1 = *(RTPIncomingSourceGroup **)&_swig_go_0; 
  
  delete arg1;
  
}


RTPIncomingMediaStreamMultiplexer *_wrap_new_RTPIncomingMediaStreamMultiplexer_native_2ca2fe9cd83b6fb4(intgo _swig_go_0, TimeService *_swig_go_1) {
  uint32_t arg1 ;
  TimeService *arg2 = 0 ;
  RTPIncomingMediaStreamMultiplexer *result = 0 ;
  RTPIncomingMediaStreamMultiplexer *_swig_go_result;
  
  arg1 = (uint32_t)_swig_go_0; 
  arg2 = *(TimeService **)&_swig_go_1; 
  
  result = (RTPIncomingMediaStreamMultiplexer *)new RTPIncomingMediaStreamMultiplexer(arg1,*arg2);
  *(RTPIncomingMediaStreamMultiplexer **)&_swig_go_result = (RTPIncomingMediaStreamMultiplexer *)result; 
  return _swig_go_result;
}


void _wrap_RTPIncomingMediaStreamMultiplexer_Stop_native_2ca2fe9cd83b6fb4(RTPIncomingMediaStreamMultiplexer *_swig_go_0) {
  RTPIncomingMediaStreamMultiplexer *arg1 = (RTPIncomingMediaStreamMultiplexer *) 0 ;
  
  arg1 = *(RTPIncomingMediaStreamMultiplexer **)&_swig_go_0; 
  
  (arg1)->Stop();
  
}


void _wrap_delete_RTPIncomingMediaStreamMultiplexer_native_2ca2fe9cd83b6fb4(RTPIncomingMediaStreamMultiplexer *_swig_go_0) {
  RTPIncomingMediaStreamMultiplexer *arg1 = (RTPIncomingMediaStreamMultiplexer *) 0 ;
  
  arg1 = *(RTPIncomingMediaStreamMultiplexer **)&_swig_go_0; 
  
  delete arg1;
  
}


RTPIncomingMediaStream *_wrap_RTPIncomingMediaStreamMultiplexer_SwigGetRTPIncomingMediaStream_native_2ca2fe9cd83b6fb4(RTPIncomingMediaStreamMultiplexer *_swig_go_0) {
  RTPIncomingMediaStreamMultiplexer *arg1 = (RTPIncomingMediaStreamMultiplexer *) 0 ;
  RTPIncomingMediaStream *result = 0 ;
  RTPIncomingMediaStream *_swig_go_result;
  
  arg1 = *(RTPIncomingMediaStreamMultiplexer **)&_swig_go_0; 
  
  result = (RTPIncomingMediaStream*)arg1;
  *(RTPIncomingMediaStream **)&_swig_go_result = (RTPIncomingMediaStream *)result; 
  return _swig_go_result;
}


void _wrap_PropertiesFacade_SetPropertyInt_native_2ca2fe9cd83b6fb4(PropertiesFacade *_swig_go_0, _gostring_ _swig_go_1, intgo _swig_go_2) {
  PropertiesFacade *arg1 = (PropertiesFacade *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  
  arg1 = *(PropertiesFacade **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  arg3 = (int)_swig_go_2; 
  
  (arg1)->SetPropertyInt((char const *)arg2,arg3);
  
  free(arg2); 
}


void _wrap_PropertiesFacade_SetPropertyStr_native_2ca2fe9cd83b6fb4(PropertiesFacade *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2) {
  PropertiesFacade *arg1 = (PropertiesFacade *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = *(PropertiesFacade **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  
  arg3 = (char *)malloc(_swig_go_2.n + 1);
  memcpy(arg3, _swig_go_2.p, _swig_go_2.n);
  arg3[_swig_go_2.n] = '\0';
  
  
  (arg1)->SetPropertyStr((char const *)arg2,(char const *)arg3);
  
  free(arg2); 
  free(arg3); 
}


void _wrap_PropertiesFacade_SetPropertyBool_native_2ca2fe9cd83b6fb4(PropertiesFacade *_swig_go_0, _gostring_ _swig_go_1, bool _swig_go_2) {
  PropertiesFacade *arg1 = (PropertiesFacade *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  
  arg1 = *(PropertiesFacade **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  arg3 = (bool)_swig_go_2; 
  
  (arg1)->SetPropertyBool((char const *)arg2,arg3);
  
  free(arg2); 
}


PropertiesFacade *_wrap_new_PropertiesFacade_native_2ca2fe9cd83b6fb4() {
  PropertiesFacade *result = 0 ;
  PropertiesFacade *_swig_go_result;
  
  
  result = (PropertiesFacade *)new PropertiesFacade();
  *(PropertiesFacade **)&_swig_go_result = (PropertiesFacade *)result; 
  return _swig_go_result;
}


void _wrap_delete_PropertiesFacade_native_2ca2fe9cd83b6fb4(PropertiesFacade *_swig_go_0) {
  PropertiesFacade *arg1 = (PropertiesFacade *) 0 ;
  
  arg1 = *(PropertiesFacade **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_MediaServer_Initialize_native_2ca2fe9cd83b6fb4() {
  MediaServer::Initialize();
  
}


void _wrap_MediaServer_EnableLog_native_2ca2fe9cd83b6fb4(bool _swig_go_0) {
  bool arg1 ;
  
  arg1 = (bool)_swig_go_0; 
  
  MediaServer::EnableLog(arg1);
  
}


void _wrap_MediaServer_EnableDebug_native_2ca2fe9cd83b6fb4(bool _swig_go_0) {
  bool arg1 ;
  
  arg1 = (bool)_swig_go_0; 
  
  MediaServer::EnableDebug(arg1);
  
}


void _wrap_MediaServer_EnableUltraDebug_native_2ca2fe9cd83b6fb4(bool _swig_go_0) {
  bool arg1 ;
  
  arg1 = (bool)_swig_go_0; 
  
  MediaServer::EnableUltraDebug(arg1);
  
}


_gostring_ _wrap_MediaServer_GetFingerprint_native_2ca2fe9cd83b6fb4() {
  std::string result;
  _gostring_ _swig_go_result;
  
  
  result = MediaServer::GetFingerprint();
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


bool _wrap_MediaServer_SetPortRange_native_2ca2fe9cd83b6fb4(intgo _swig_go_0, intgo _swig_go_1) {
  int arg1 ;
  int arg2 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  result = (bool)MediaServer::SetPortRange(arg1,arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


MediaServer *_wrap_new_MediaServer_native_2ca2fe9cd83b6fb4() {
  MediaServer *result = 0 ;
  MediaServer *_swig_go_result;
  
  
  result = (MediaServer *)new MediaServer();
  *(MediaServer **)&_swig_go_result = (MediaServer *)result; 
  return _swig_go_result;
}


void _wrap_delete_MediaServer_native_2ca2fe9cd83b6fb4(MediaServer *_swig_go_0) {
  MediaServer *arg1 = (MediaServer *) 0 ;
  
  arg1 = *(MediaServer **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_RTPBundleTransportConnection_transport_set_native_2ca2fe9cd83b6fb4(RTPBundleTransportConnection *_swig_go_0, DTLSICETransport *_swig_go_1) {
  RTPBundleTransportConnection *arg1 = (RTPBundleTransportConnection *) 0 ;
  DTLSICETransport *arg2 = (DTLSICETransport *) 0 ;
  
  arg1 = *(RTPBundleTransportConnection **)&_swig_go_0; 
  arg2 = *(DTLSICETransport **)&_swig_go_1; 
  
  if (arg1) (arg1)->transport = arg2;
  
}


DTLSICETransport *_wrap_RTPBundleTransportConnection_transport_get_native_2ca2fe9cd83b6fb4(RTPBundleTransportConnection *_swig_go_0) {
  RTPBundleTransportConnection *arg1 = (RTPBundleTransportConnection *) 0 ;
  DTLSICETransport *result = 0 ;
  DTLSICETransport *_swig_go_result;
  
  arg1 = *(RTPBundleTransportConnection **)&_swig_go_0; 
  
  result = (DTLSICETransport *) ((arg1)->transport);
  *(DTLSICETransport **)&_swig_go_result = (DTLSICETransport *)result; 
  return _swig_go_result;
}


void _wrap_RTPBundleTransportConnection_disableSTUNKeepAlive_set_native_2ca2fe9cd83b6fb4(RTPBundleTransportConnection *_swig_go_0, bool _swig_go_1) {
  RTPBundleTransportConnection *arg1 = (RTPBundleTransportConnection *) 0 ;
  bool arg2 ;
  
  arg1 = *(RTPBundleTransportConnection **)&_swig_go_0; 
  arg2 = (bool)_swig_go_1; 
  
  if (arg1) (arg1)->disableSTUNKeepAlive = arg2;
  
}


bool _wrap_RTPBundleTransportConnection_disableSTUNKeepAlive_get_native_2ca2fe9cd83b6fb4(RTPBundleTransportConnection *_swig_go_0) {
  RTPBundleTransportConnection *arg1 = (RTPBundleTransportConnection *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(RTPBundleTransportConnection **)&_swig_go_0; 
  
  result = (bool) ((arg1)->disableSTUNKeepAlive);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_RTPBundleTransportConnection_iceRequestsSent_set_native_2ca2fe9cd83b6fb4(RTPBundleTransportConnection *_swig_go_0, long long _swig_go_1) {
  RTPBundleTransportConnection *arg1 = (RTPBundleTransportConnection *) 0 ;
  size_t arg2 ;
  
  arg1 = *(RTPBundleTransportConnection **)&_swig_go_0; 
  arg2 = (size_t)_swig_go_1; 
  
  if (arg1) (arg1)->iceRequestsSent = arg2;
  
}


long long _wrap_RTPBundleTransportConnection_iceRequestsSent_get_native_2ca2fe9cd83b6fb4(RTPBundleTransportConnection *_swig_go_0) {
  RTPBundleTransportConnection *arg1 = (RTPBundleTransportConnection *) 0 ;
  size_t result;
  long long _swig_go_result;
  
  arg1 = *(RTPBundleTransportConnection **)&_swig_go_0; 
  
  result =  ((arg1)->iceRequestsSent);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_RTPBundleTransportConnection_iceRequestsReceived_set_native_2ca2fe9cd83b6fb4(RTPBundleTransportConnection *_swig_go_0, long long _swig_go_1) {
  RTPBundleTransportConnection *arg1 = (RTPBundleTransportConnection *) 0 ;
  size_t arg2 ;
  
  arg1 = *(RTPBundleTransportConnection **)&_swig_go_0; 
  arg2 = (size_t)_swig_go_1; 
  
  if (arg1) (arg1)->iceRequestsReceived = arg2;
  
}


long long _wrap_RTPBundleTransportConnection_iceRequestsReceived_get_native_2ca2fe9cd83b6fb4(RTPBundleTransportConnection *_swig_go_0) {
  RTPBundleTransportConnection *arg1 = (RTPBundleTransportConnection *) 0 ;
  size_t result;
  long long _swig_go_result;
  
  arg1 = *(RTPBundleTransportConnection **)&_swig_go_0; 
  
  result =  ((arg1)->iceRequestsReceived);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_RTPBundleTransportConnection_iceResponsesSent_set_native_2ca2fe9cd83b6fb4(RTPBundleTransportConnection *_swig_go_0, long long _swig_go_1) {
  RTPBundleTransportConnection *arg1 = (RTPBundleTransportConnection *) 0 ;
  size_t arg2 ;
  
  arg1 = *(RTPBundleTransportConnection **)&_swig_go_0; 
  arg2 = (size_t)_swig_go_1; 
  
  if (arg1) (arg1)->iceResponsesSent = arg2;
  
}


long long _wrap_RTPBundleTransportConnection_iceResponsesSent_get_native_2ca2fe9cd83b6fb4(RTPBundleTransportConnection *_swig_go_0) {
  RTPBundleTransportConnection *arg1 = (RTPBundleTransportConnection *) 0 ;
  size_t result;
  long long _swig_go_result;
  
  arg1 = *(RTPBundleTransportConnection **)&_swig_go_0; 
  
  result =  ((arg1)->iceResponsesSent);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_RTPBundleTransportConnection_iceResponsesReceived_set_native_2ca2fe9cd83b6fb4(RTPBundleTransportConnection *_swig_go_0, long long _swig_go_1) {
  RTPBundleTransportConnection *arg1 = (RTPBundleTransportConnection *) 0 ;
  size_t arg2 ;
  
  arg1 = *(RTPBundleTransportConnection **)&_swig_go_0; 
  arg2 = (size_t)_swig_go_1; 
  
  if (arg1) (arg1)->iceResponsesReceived = arg2;
  
}


long long _wrap_RTPBundleTransportConnection_iceResponsesReceived_get_native_2ca2fe9cd83b6fb4(RTPBundleTransportConnection *_swig_go_0) {
  RTPBundleTransportConnection *arg1 = (RTPBundleTransportConnection *) 0 ;
  size_t result;
  long long _swig_go_result;
  
  arg1 = *(RTPBundleTransportConnection **)&_swig_go_0; 
  
  result =  ((arg1)->iceResponsesReceived);
  _swig_go_result = result; 
  return _swig_go_result;
}


RTPBundleTransport *_wrap_new_RTPBundleTransport_native_2ca2fe9cd83b6fb4() {
  RTPBundleTransport *result = 0 ;
  RTPBundleTransport *_swig_go_result;
  
  
  result = (RTPBundleTransport *)new RTPBundleTransport();
  *(RTPBundleTransport **)&_swig_go_result = (RTPBundleTransport *)result; 
  return _swig_go_result;
}


intgo _wrap_RTPBundleTransport_Init__SWIG_0_native_2ca2fe9cd83b6fb4(RTPBundleTransport *_swig_go_0) {
  RTPBundleTransport *arg1 = (RTPBundleTransport *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(RTPBundleTransport **)&_swig_go_0; 
  
  result = (int)(arg1)->Init();
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_RTPBundleTransport_Init__SWIG_1_native_2ca2fe9cd83b6fb4(RTPBundleTransport *_swig_go_0, intgo _swig_go_1) {
  RTPBundleTransport *arg1 = (RTPBundleTransport *) 0 ;
  int arg2 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(RTPBundleTransport **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  result = (int)(arg1)->Init(arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


RTPBundleTransportConnection *_wrap_RTPBundleTransport_AddICETransport_native_2ca2fe9cd83b6fb4(RTPBundleTransport *_swig_go_0, _gostring_ _swig_go_1, Properties *_swig_go_2) {
  RTPBundleTransport *arg1 = (RTPBundleTransport *) 0 ;
  std::string *arg2 = 0 ;
  Properties *arg3 = 0 ;
  RTPBundleTransportConnection *result = 0 ;
  RTPBundleTransportConnection *_swig_go_result;
  
  arg1 = *(RTPBundleTransport **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = *(Properties **)&_swig_go_2; 
  
  result = (RTPBundleTransportConnection *)(arg1)->AddICETransport((std::string const &)*arg2,(Properties const &)*arg3);
  *(RTPBundleTransportConnection **)&_swig_go_result = (RTPBundleTransportConnection *)result; 
  return _swig_go_result;
}


intgo _wrap_RTPBundleTransport_RemoveICETransport_native_2ca2fe9cd83b6fb4(RTPBundleTransport *_swig_go_0, _gostring_ _swig_go_1) {
  RTPBundleTransport *arg1 = (RTPBundleTransport *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(RTPBundleTransport **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  result = (int)(arg1)->RemoveICETransport((std::string const &)*arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_RTPBundleTransport_End_native_2ca2fe9cd83b6fb4(RTPBundleTransport *_swig_go_0) {
  RTPBundleTransport *arg1 = (RTPBundleTransport *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(RTPBundleTransport **)&_swig_go_0; 
  
  result = (int)(arg1)->End();
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_RTPBundleTransport_GetLocalPort_native_2ca2fe9cd83b6fb4(RTPBundleTransport *_swig_go_0) {
  RTPBundleTransport *arg1 = (RTPBundleTransport *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(RTPBundleTransport **)&_swig_go_0; 
  
  result = (int)((RTPBundleTransport const *)arg1)->GetLocalPort();
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_RTPBundleTransport_AddRemoteCandidate_native_2ca2fe9cd83b6fb4(RTPBundleTransport *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2, short _swig_go_3) {
  RTPBundleTransport *arg1 = (RTPBundleTransport *) 0 ;
  std::string *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  uint16_t arg4 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(RTPBundleTransport **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  arg3 = (char *)malloc(_swig_go_2.n + 1);
  memcpy(arg3, _swig_go_2.p, _swig_go_2.n);
  arg3[_swig_go_2.n] = '\0';
  
  arg4 = (uint16_t)_swig_go_3; 
  
  result = (int)(arg1)->AddRemoteCandidate((std::string const &)*arg2,(char const *)arg3,arg4);
  _swig_go_result = result; 
  free(arg3); 
  return _swig_go_result;
}


bool _wrap_RTPBundleTransport_SetAffinity_native_2ca2fe9cd83b6fb4(RTPBundleTransport *_swig_go_0, intgo _swig_go_1) {
  RTPBundleTransport *arg1 = (RTPBundleTransport *) 0 ;
  int arg2 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(RTPBundleTransport **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  result = (bool)(arg1)->SetAffinity(arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_RTPBundleTransport_SetIceTimeout_native_2ca2fe9cd83b6fb4(RTPBundleTransport *_swig_go_0, intgo _swig_go_1) {
  RTPBundleTransport *arg1 = (RTPBundleTransport *) 0 ;
  uint32_t arg2 ;
  
  arg1 = *(RTPBundleTransport **)&_swig_go_0; 
  arg2 = (uint32_t)_swig_go_1; 
  
  (arg1)->SetIceTimeout(arg2);
  
}


TimeService *_wrap_RTPBundleTransport_GetTimeService_native_2ca2fe9cd83b6fb4(RTPBundleTransport *_swig_go_0) {
  RTPBundleTransport *arg1 = (RTPBundleTransport *) 0 ;
  TimeService *result = 0 ;
  TimeService *_swig_go_result;
  
  arg1 = *(RTPBundleTransport **)&_swig_go_0; 
  
  result = (TimeService *) &(arg1)->GetTimeService();
  *(TimeService **)&_swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_RTPBundleTransport_DeleteOutGoingSourceGroup_native_2ca2fe9cd83b6fb4(RTPBundleTransport *_swig_go_0, RTPOutgoingSourceGroup *_swig_go_1) {
  RTPBundleTransport *arg1 = (RTPBundleTransport *) 0 ;
  RTPOutgoingSourceGroup *arg2 = (RTPOutgoingSourceGroup *) 0 ;
  
  arg1 = *(RTPBundleTransport **)&_swig_go_0; 
  arg2 = *(RTPOutgoingSourceGroup **)&_swig_go_1; 
  
  (arg1)->DeleteOutGoingSourceGroup(arg2);
  
}


void _wrap_delete_RTPBundleTransport_native_2ca2fe9cd83b6fb4(RTPBundleTransport *_swig_go_0) {
  RTPBundleTransport *arg1 = (RTPBundleTransport *) 0 ;
  
  arg1 = *(RTPBundleTransport **)&_swig_go_0; 
  
  delete arg1;
  
}


DTLSICETransportListener *_wrap__swig_NewDirectorDTLSICETransportListenerDTLSICETransportListener_native_2ca2fe9cd83b6fb4(intgo _swig_go_0) {
  int arg1 ;
  DTLSICETransportListener *result = 0 ;
  DTLSICETransportListener *_swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  
  result = new SwigDirector_DTLSICETransportListener(arg1);
  *(DTLSICETransportListener **)&_swig_go_result = (DTLSICETransportListener *)result; 
  return _swig_go_result;
}


void _wrap_DeleteDirectorDTLSICETransportListener_native_2ca2fe9cd83b6fb4(DTLSICETransportListener *_swig_go_0) {
  DTLSICETransportListener *arg1 = (DTLSICETransportListener *) 0 ;
  
  arg1 = *(DTLSICETransportListener **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap__swig_DirectorDTLSICETransportListener_upcall_OnDTLSStateChange_native_2ca2fe9cd83b6fb4(SwigDirector_DTLSICETransportListener *_swig_go_0, intgo _swig_go_1) {
  SwigDirector_DTLSICETransportListener *arg1 = (SwigDirector_DTLSICETransportListener *) 0 ;
  uint32_t arg2 ;
  
  arg1 = *(SwigDirector_DTLSICETransportListener **)&_swig_go_0; 
  arg2 = (uint32_t)_swig_go_1; 
  
  arg1->_swig_upcall_onDTLSStateChange(arg2);
  
}


DTLSICETransportListener *_wrap_new_DTLSICETransportListener_native_2ca2fe9cd83b6fb4() {
  DTLSICETransportListener *result = 0 ;
  DTLSICETransportListener *_swig_go_result;
  
  
  result = (DTLSICETransportListener *)new DTLSICETransportListener();
  *(DTLSICETransportListener **)&_swig_go_result = (DTLSICETransportListener *)result; 
  return _swig_go_result;
}


void _wrap_delete_DTLSICETransportListener_native_2ca2fe9cd83b6fb4(DTLSICETransportListener *_swig_go_0) {
  DTLSICETransportListener *arg1 = (DTLSICETransportListener *) 0 ;
  
  arg1 = *(DTLSICETransportListener **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_DTLSICETransportListener_onDTLSStateChange_native_2ca2fe9cd83b6fb4(DTLSICETransportListener *_swig_go_0, intgo _swig_go_1) {
  DTLSICETransportListener *arg1 = (DTLSICETransportListener *) 0 ;
  uint32_t arg2 ;
  
  arg1 = *(DTLSICETransportListener **)&_swig_go_0; 
  arg2 = (uint32_t)_swig_go_1; 
  
  (arg1)->onDTLSStateChange(arg2);
  
}


void _wrap_delete_RemoteRateEstimatorListener_native_2ca2fe9cd83b6fb4(RemoteRateEstimatorListener *_swig_go_0) {
  RemoteRateEstimatorListener *arg1 = (RemoteRateEstimatorListener *) 0 ;
  
  arg1 = *(RemoteRateEstimatorListener **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_DTLSICETransport_SetListener_native_2ca2fe9cd83b6fb4(DTLSICETransport *_swig_go_0, DTLSICETransportListener *_swig_go_1) {
  DTLSICETransport *arg1 = (DTLSICETransport *) 0 ;
  DTLSICETransportListener *arg2 = (DTLSICETransportListener *) 0 ;
  
  arg1 = *(DTLSICETransport **)&_swig_go_0; 
  arg2 = *(DTLSICETransportListener **)&_swig_go_1; 
  
  (arg1)->SetListener(arg2);
  
}


void _wrap_DTLSICETransport_Start_native_2ca2fe9cd83b6fb4(DTLSICETransport *_swig_go_0) {
  DTLSICETransport *arg1 = (DTLSICETransport *) 0 ;
  
  arg1 = *(DTLSICETransport **)&_swig_go_0; 
  
  (arg1)->Start();
  
}


void _wrap_DTLSICETransport_Stop_native_2ca2fe9cd83b6fb4(DTLSICETransport *_swig_go_0) {
  DTLSICETransport *arg1 = (DTLSICETransport *) 0 ;
  
  arg1 = *(DTLSICETransport **)&_swig_go_0; 
  
  (arg1)->Stop();
  
}


void _wrap_DTLSICETransport_SetSRTPProtectionProfiles_native_2ca2fe9cd83b6fb4(DTLSICETransport *_swig_go_0, _gostring_ _swig_go_1) {
  DTLSICETransport *arg1 = (DTLSICETransport *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(DTLSICETransport **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  (arg1)->SetSRTPProtectionProfiles((std::string const &)*arg2);
  
}


void _wrap_DTLSICETransport_SetRemoteProperties_native_2ca2fe9cd83b6fb4(DTLSICETransport *_swig_go_0, Properties *_swig_go_1) {
  DTLSICETransport *arg1 = (DTLSICETransport *) 0 ;
  Properties *arg2 = 0 ;
  
  arg1 = *(DTLSICETransport **)&_swig_go_0; 
  arg2 = *(Properties **)&_swig_go_1; 
  
  (arg1)->SetRemoteProperties((Properties const &)*arg2);
  
}


void _wrap_DTLSICETransport_SetLocalProperties_native_2ca2fe9cd83b6fb4(DTLSICETransport *_swig_go_0, Properties *_swig_go_1) {
  DTLSICETransport *arg1 = (DTLSICETransport *) 0 ;
  Properties *arg2 = 0 ;
  
  arg1 = *(DTLSICETransport **)&_swig_go_0; 
  arg2 = *(Properties **)&_swig_go_1; 
  
  (arg1)->SetLocalProperties((Properties const &)*arg2);
  
}


intgo _wrap_DTLSICETransport_SendPLI_native_2ca2fe9cd83b6fb4(DTLSICETransport *_swig_go_0, intgo _swig_go_1) {
  DTLSICETransport *arg1 = (DTLSICETransport *) 0 ;
  uint32_t arg2 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(DTLSICETransport **)&_swig_go_0; 
  arg2 = (uint32_t)_swig_go_1; 
  
  result = (int)(arg1)->SendPLI(arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_DTLSICETransport_Enqueue_native_2ca2fe9cd83b6fb4(DTLSICETransport *_swig_go_0, RTPPacket::shared *_swig_go_1) {
  DTLSICETransport *arg1 = (DTLSICETransport *) 0 ;
  RTPPacket::shared *arg2 = 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(DTLSICETransport **)&_swig_go_0; 
  arg2 = *(RTPPacket::shared **)&_swig_go_1; 
  
  result = (int)(arg1)->Enqueue((RTPPacket::shared const &)*arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_DTLSICETransport_Dump__SWIG_0_native_2ca2fe9cd83b6fb4(DTLSICETransport *_swig_go_0, _gostring_ _swig_go_1, bool _swig_go_2, bool _swig_go_3, bool _swig_go_4, bool _swig_go_5) {
  DTLSICETransport *arg1 = (DTLSICETransport *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  bool arg4 ;
  bool arg5 ;
  bool arg6 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(DTLSICETransport **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  arg3 = (bool)_swig_go_2; 
  arg4 = (bool)_swig_go_3; 
  arg5 = (bool)_swig_go_4; 
  arg6 = (bool)_swig_go_5; 
  
  result = (int)(arg1)->Dump((char const *)arg2,arg3,arg4,arg5,arg6);
  _swig_go_result = result; 
  free(arg2); 
  return _swig_go_result;
}


intgo _wrap_DTLSICETransport_Dump__SWIG_1_native_2ca2fe9cd83b6fb4(DTLSICETransport *_swig_go_0, _gostring_ _swig_go_1, bool _swig_go_2, bool _swig_go_3, bool _swig_go_4) {
  DTLSICETransport *arg1 = (DTLSICETransport *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  bool arg4 ;
  bool arg5 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(DTLSICETransport **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  arg3 = (bool)_swig_go_2; 
  arg4 = (bool)_swig_go_3; 
  arg5 = (bool)_swig_go_4; 
  
  result = (int)(arg1)->Dump((char const *)arg2,arg3,arg4,arg5);
  _swig_go_result = result; 
  free(arg2); 
  return _swig_go_result;
}


intgo _wrap_DTLSICETransport_Dump__SWIG_2_native_2ca2fe9cd83b6fb4(DTLSICETransport *_swig_go_0, _gostring_ _swig_go_1, bool _swig_go_2, bool _swig_go_3) {
  DTLSICETransport *arg1 = (DTLSICETransport *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  bool arg4 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(DTLSICETransport **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  arg3 = (bool)_swig_go_2; 
  arg4 = (bool)_swig_go_3; 
  
  result = (int)(arg1)->Dump((char const *)arg2,arg3,arg4);
  _swig_go_result = result; 
  free(arg2); 
  return _swig_go_result;
}


intgo _wrap_DTLSICETransport_Dump__SWIG_3_native_2ca2fe9cd83b6fb4(DTLSICETransport *_swig_go_0, _gostring_ _swig_go_1, bool _swig_go_2) {
  DTLSICETransport *arg1 = (DTLSICETransport *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(DTLSICETransport **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  arg3 = (bool)_swig_go_2; 
  
  result = (int)(arg1)->Dump((char const *)arg2,arg3);
  _swig_go_result = result; 
  free(arg2); 
  return _swig_go_result;
}


intgo _wrap_DTLSICETransport_Dump__SWIG_4_native_2ca2fe9cd83b6fb4(DTLSICETransport *_swig_go_0, _gostring_ _swig_go_1) {
  DTLSICETransport *arg1 = (DTLSICETransport *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(DTLSICETransport **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  
  result = (int)(arg1)->Dump((char const *)arg2);
  _swig_go_result = result; 
  free(arg2); 
  return _swig_go_result;
}


intgo _wrap_DTLSICETransport_Dump__SWIG_5_native_2ca2fe9cd83b6fb4(DTLSICETransport *_swig_go_0, UDPDumper *_swig_go_1, bool _swig_go_2, bool _swig_go_3, bool _swig_go_4, bool _swig_go_5) {
  DTLSICETransport *arg1 = (DTLSICETransport *) 0 ;
  UDPDumper *arg2 = (UDPDumper *) 0 ;
  bool arg3 ;
  bool arg4 ;
  bool arg5 ;
  bool arg6 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(DTLSICETransport **)&_swig_go_0; 
  arg2 = *(UDPDumper **)&_swig_go_1; 
  arg3 = (bool)_swig_go_2; 
  arg4 = (bool)_swig_go_3; 
  arg5 = (bool)_swig_go_4; 
  arg6 = (bool)_swig_go_5; 
  
  result = (int)(arg1)->Dump(arg2,arg3,arg4,arg5,arg6);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_DTLSICETransport_Dump__SWIG_6_native_2ca2fe9cd83b6fb4(DTLSICETransport *_swig_go_0, UDPDumper *_swig_go_1, bool _swig_go_2, bool _swig_go_3, bool _swig_go_4) {
  DTLSICETransport *arg1 = (DTLSICETransport *) 0 ;
  UDPDumper *arg2 = (UDPDumper *) 0 ;
  bool arg3 ;
  bool arg4 ;
  bool arg5 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(DTLSICETransport **)&_swig_go_0; 
  arg2 = *(UDPDumper **)&_swig_go_1; 
  arg3 = (bool)_swig_go_2; 
  arg4 = (bool)_swig_go_3; 
  arg5 = (bool)_swig_go_4; 
  
  result = (int)(arg1)->Dump(arg2,arg3,arg4,arg5);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_DTLSICETransport_Dump__SWIG_7_native_2ca2fe9cd83b6fb4(DTLSICETransport *_swig_go_0, UDPDumper *_swig_go_1, bool _swig_go_2, bool _swig_go_3) {
  DTLSICETransport *arg1 = (DTLSICETransport *) 0 ;
  UDPDumper *arg2 = (UDPDumper *) 0 ;
  bool arg3 ;
  bool arg4 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(DTLSICETransport **)&_swig_go_0; 
  arg2 = *(UDPDumper **)&_swig_go_1; 
  arg3 = (bool)_swig_go_2; 
  arg4 = (bool)_swig_go_3; 
  
  result = (int)(arg1)->Dump(arg2,arg3,arg4);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_DTLSICETransport_Dump__SWIG_8_native_2ca2fe9cd83b6fb4(DTLSICETransport *_swig_go_0, UDPDumper *_swig_go_1, bool _swig_go_2) {
  DTLSICETransport *arg1 = (DTLSICETransport *) 0 ;
  UDPDumper *arg2 = (UDPDumper *) 0 ;
  bool arg3 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(DTLSICETransport **)&_swig_go_0; 
  arg2 = *(UDPDumper **)&_swig_go_1; 
  arg3 = (bool)_swig_go_2; 
  
  result = (int)(arg1)->Dump(arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_DTLSICETransport_Dump__SWIG_9_native_2ca2fe9cd83b6fb4(DTLSICETransport *_swig_go_0, UDPDumper *_swig_go_1) {
  DTLSICETransport *arg1 = (DTLSICETransport *) 0 ;
  UDPDumper *arg2 = (UDPDumper *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(DTLSICETransport **)&_swig_go_0; 
  arg2 = *(UDPDumper **)&_swig_go_1; 
  
  result = (int)(arg1)->Dump(arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_DTLSICETransport_DumpBWEStats_native_2ca2fe9cd83b6fb4(DTLSICETransport *_swig_go_0, _gostring_ _swig_go_1) {
  DTLSICETransport *arg1 = (DTLSICETransport *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(DTLSICETransport **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  
  result = (int)(arg1)->DumpBWEStats((char const *)arg2);
  _swig_go_result = result; 
  free(arg2); 
  return _swig_go_result;
}


void _wrap_DTLSICETransport_Reset_native_2ca2fe9cd83b6fb4(DTLSICETransport *_swig_go_0) {
  DTLSICETransport *arg1 = (DTLSICETransport *) 0 ;
  
  arg1 = *(DTLSICETransport **)&_swig_go_0; 
  
  (arg1)->Reset();
  
}


void _wrap_DTLSICETransport_ActivateRemoteCandidate_native_2ca2fe9cd83b6fb4(DTLSICETransport *_swig_go_0, ICERemoteCandidate *_swig_go_1, bool _swig_go_2, intgo _swig_go_3) {
  DTLSICETransport *arg1 = (DTLSICETransport *) 0 ;
  ICERemoteCandidate *arg2 = (ICERemoteCandidate *) 0 ;
  bool arg3 ;
  uint32_t arg4 ;
  
  arg1 = *(DTLSICETransport **)&_swig_go_0; 
  arg2 = *(ICERemoteCandidate **)&_swig_go_1; 
  arg3 = (bool)_swig_go_2; 
  arg4 = (uint32_t)_swig_go_3; 
  
  (arg1)->ActivateRemoteCandidate(arg2,arg3,arg4);
  
}


intgo _wrap_DTLSICETransport_SetRemoteCryptoDTLS_native_2ca2fe9cd83b6fb4(DTLSICETransport *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2, _gostring_ _swig_go_3) {
  DTLSICETransport *arg1 = (DTLSICETransport *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(DTLSICETransport **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  
  arg3 = (char *)malloc(_swig_go_2.n + 1);
  memcpy(arg3, _swig_go_2.p, _swig_go_2.n);
  arg3[_swig_go_2.n] = '\0';
  
  
  arg4 = (char *)malloc(_swig_go_3.n + 1);
  memcpy(arg4, _swig_go_3.p, _swig_go_3.n);
  arg4[_swig_go_3.n] = '\0';
  
  
  result = (int)(arg1)->SetRemoteCryptoDTLS((char const *)arg2,(char const *)arg3,(char const *)arg4);
  _swig_go_result = result; 
  free(arg2); 
  free(arg3); 
  free(arg4); 
  return _swig_go_result;
}


intgo _wrap_DTLSICETransport_SetLocalSTUNCredentials_native_2ca2fe9cd83b6fb4(DTLSICETransport *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2) {
  DTLSICETransport *arg1 = (DTLSICETransport *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(DTLSICETransport **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  
  arg3 = (char *)malloc(_swig_go_2.n + 1);
  memcpy(arg3, _swig_go_2.p, _swig_go_2.n);
  arg3[_swig_go_2.n] = '\0';
  
  
  result = (int)(arg1)->SetLocalSTUNCredentials((char const *)arg2,(char const *)arg3);
  _swig_go_result = result; 
  free(arg2); 
  free(arg3); 
  return _swig_go_result;
}


intgo _wrap_DTLSICETransport_SetRemoteSTUNCredentials_native_2ca2fe9cd83b6fb4(DTLSICETransport *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2) {
  DTLSICETransport *arg1 = (DTLSICETransport *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(DTLSICETransport **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  
  arg3 = (char *)malloc(_swig_go_2.n + 1);
  memcpy(arg3, _swig_go_2.p, _swig_go_2.n);
  arg3[_swig_go_2.n] = '\0';
  
  
  result = (int)(arg1)->SetRemoteSTUNCredentials((char const *)arg2,(char const *)arg3);
  _swig_go_result = result; 
  free(arg2); 
  free(arg3); 
  return _swig_go_result;
}


bool _wrap_DTLSICETransport_AddOutgoingSourceGroup_native_2ca2fe9cd83b6fb4(DTLSICETransport *_swig_go_0, RTPOutgoingSourceGroup *_swig_go_1) {
  DTLSICETransport *arg1 = (DTLSICETransport *) 0 ;
  RTPOutgoingSourceGroup *arg2 = (RTPOutgoingSourceGroup *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(DTLSICETransport **)&_swig_go_0; 
  arg2 = *(RTPOutgoingSourceGroup **)&_swig_go_1; 
  
  result = (bool)(arg1)->AddOutgoingSourceGroup(arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_DTLSICETransport_RemoveOutgoingSourceGroup_native_2ca2fe9cd83b6fb4(DTLSICETransport *_swig_go_0, RTPOutgoingSourceGroup *_swig_go_1) {
  DTLSICETransport *arg1 = (DTLSICETransport *) 0 ;
  RTPOutgoingSourceGroup *arg2 = (RTPOutgoingSourceGroup *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(DTLSICETransport **)&_swig_go_0; 
  arg2 = *(RTPOutgoingSourceGroup **)&_swig_go_1; 
  
  result = (bool)(arg1)->RemoveOutgoingSourceGroup(arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_DTLSICETransport_AddIncomingSourceGroup_native_2ca2fe9cd83b6fb4(DTLSICETransport *_swig_go_0, RTPIncomingSourceGroup *_swig_go_1) {
  DTLSICETransport *arg1 = (DTLSICETransport *) 0 ;
  RTPIncomingSourceGroup *arg2 = (RTPIncomingSourceGroup *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(DTLSICETransport **)&_swig_go_0; 
  arg2 = *(RTPIncomingSourceGroup **)&_swig_go_1; 
  
  result = (bool)(arg1)->AddIncomingSourceGroup(arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_DTLSICETransport_RemoveIncomingSourceGroup_native_2ca2fe9cd83b6fb4(DTLSICETransport *_swig_go_0, RTPIncomingSourceGroup *_swig_go_1) {
  DTLSICETransport *arg1 = (DTLSICETransport *) 0 ;
  RTPIncomingSourceGroup *arg2 = (RTPIncomingSourceGroup *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(DTLSICETransport **)&_swig_go_0; 
  arg2 = *(RTPIncomingSourceGroup **)&_swig_go_1; 
  
  result = (bool)(arg1)->RemoveIncomingSourceGroup(arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_DTLSICETransport_SetBandwidthProbing_native_2ca2fe9cd83b6fb4(DTLSICETransport *_swig_go_0, bool _swig_go_1) {
  DTLSICETransport *arg1 = (DTLSICETransport *) 0 ;
  bool arg2 ;
  
  arg1 = *(DTLSICETransport **)&_swig_go_0; 
  arg2 = (bool)_swig_go_1; 
  
  (arg1)->SetBandwidthProbing(arg2);
  
}


void _wrap_DTLSICETransport_SetMaxProbingBitrate_native_2ca2fe9cd83b6fb4(DTLSICETransport *_swig_go_0, intgo _swig_go_1) {
  DTLSICETransport *arg1 = (DTLSICETransport *) 0 ;
  uint32_t arg2 ;
  
  arg1 = *(DTLSICETransport **)&_swig_go_0; 
  arg2 = (uint32_t)_swig_go_1; 
  
  (arg1)->SetMaxProbingBitrate(arg2);
  
}


void _wrap_DTLSICETransport_SetProbingBitrateLimit_native_2ca2fe9cd83b6fb4(DTLSICETransport *_swig_go_0, intgo _swig_go_1) {
  DTLSICETransport *arg1 = (DTLSICETransport *) 0 ;
  uint32_t arg2 ;
  
  arg1 = *(DTLSICETransport **)&_swig_go_0; 
  arg2 = (uint32_t)_swig_go_1; 
  
  (arg1)->SetProbingBitrateLimit(arg2);
  
}


void _wrap_DTLSICETransport_SetSenderSideEstimatorListener_native_2ca2fe9cd83b6fb4(DTLSICETransport *_swig_go_0, RemoteRateEstimatorListener *_swig_go_1) {
  DTLSICETransport *arg1 = (DTLSICETransport *) 0 ;
  RemoteRateEstimatorListener *arg2 = (RemoteRateEstimatorListener *) 0 ;
  
  arg1 = *(DTLSICETransport **)&_swig_go_0; 
  arg2 = *(RemoteRateEstimatorListener **)&_swig_go_1; 
  
  (arg1)->SetSenderSideEstimatorListener(arg2);
  
}


_gostring_ _wrap_DTLSICETransport_GetRemoteUsername_native_2ca2fe9cd83b6fb4(DTLSICETransport *_swig_go_0) {
  DTLSICETransport *arg1 = (DTLSICETransport *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(DTLSICETransport **)&_swig_go_0; 
  
  result = (char *)((DTLSICETransport const *)arg1)->GetRemoteUsername();
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


_gostring_ _wrap_DTLSICETransport_GetRemotePwd_native_2ca2fe9cd83b6fb4(DTLSICETransport *_swig_go_0) {
  DTLSICETransport *arg1 = (DTLSICETransport *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(DTLSICETransport **)&_swig_go_0; 
  
  result = (char *)((DTLSICETransport const *)arg1)->GetRemotePwd();
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


_gostring_ _wrap_DTLSICETransport_GetLocalUsername_native_2ca2fe9cd83b6fb4(DTLSICETransport *_swig_go_0) {
  DTLSICETransport *arg1 = (DTLSICETransport *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(DTLSICETransport **)&_swig_go_0; 
  
  result = (char *)((DTLSICETransport const *)arg1)->GetLocalUsername();
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


_gostring_ _wrap_DTLSICETransport_GetLocalPwd_native_2ca2fe9cd83b6fb4(DTLSICETransport *_swig_go_0) {
  DTLSICETransport *arg1 = (DTLSICETransport *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(DTLSICETransport **)&_swig_go_0; 
  
  result = (char *)((DTLSICETransport const *)arg1)->GetLocalPwd();
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


intgo _wrap_DTLSICETransport_GetRTT_native_2ca2fe9cd83b6fb4(DTLSICETransport *_swig_go_0) {
  DTLSICETransport *arg1 = (DTLSICETransport *) 0 ;
  uint32_t result;
  intgo _swig_go_result;
  
  arg1 = *(DTLSICETransport **)&_swig_go_0; 
  
  result = (uint32_t)((DTLSICETransport const *)arg1)->GetRTT();
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_DTLSICETransport_GetLastActiveTime_native_2ca2fe9cd83b6fb4(DTLSICETransport *_swig_go_0) {
  DTLSICETransport *arg1 = (DTLSICETransport *) 0 ;
  uint64_t result;
  long long _swig_go_result;
  
  arg1 = *(DTLSICETransport **)&_swig_go_0; 
  
  result = (uint64_t)(arg1)->GetLastActiveTime();
  _swig_go_result = result; 
  return _swig_go_result;
}


TimeService *_wrap_DTLSICETransport_GetTimeService_native_2ca2fe9cd83b6fb4(DTLSICETransport *_swig_go_0) {
  DTLSICETransport *arg1 = (DTLSICETransport *) 0 ;
  TimeService *result = 0 ;
  TimeService *_swig_go_result;
  
  arg1 = *(DTLSICETransport **)&_swig_go_0; 
  
  result = (TimeService *) &(arg1)->GetTimeService();
  *(TimeService **)&_swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_delete_DTLSICETransport_native_2ca2fe9cd83b6fb4(DTLSICETransport *_swig_go_0) {
  DTLSICETransport *arg1 = (DTLSICETransport *) 0 ;
  
  arg1 = *(DTLSICETransport **)&_swig_go_0; 
  
  delete arg1;
  
}


RTPSessionFacade *_wrap_new_RTPSessionFacade_native_2ca2fe9cd83b6fb4(intgo _swig_go_0) {
  MediaFrameType arg1 ;
  RTPSessionFacade *result = 0 ;
  RTPSessionFacade *_swig_go_result;
  
  arg1 = (MediaFrameType)_swig_go_0; 
  
  result = (RTPSessionFacade *)new RTPSessionFacade(arg1);
  *(RTPSessionFacade **)&_swig_go_result = (RTPSessionFacade *)result; 
  return _swig_go_result;
}


intgo _wrap_RTPSessionFacade_Init_native_2ca2fe9cd83b6fb4(RTPSessionFacade *_swig_go_0, Properties *_swig_go_1) {
  RTPSessionFacade *arg1 = (RTPSessionFacade *) 0 ;
  Properties *arg2 = 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(RTPSessionFacade **)&_swig_go_0; 
  arg2 = *(Properties **)&_swig_go_1; 
  
  result = (int)(arg1)->Init((Properties const &)*arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_RTPSessionFacade_SetLocalPort_native_2ca2fe9cd83b6fb4(RTPSessionFacade *_swig_go_0, intgo _swig_go_1) {
  RTPSessionFacade *arg1 = (RTPSessionFacade *) 0 ;
  int arg2 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(RTPSessionFacade **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  result = (int)(arg1)->SetLocalPort(arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_RTPSessionFacade_GetLocalPort_native_2ca2fe9cd83b6fb4(RTPSessionFacade *_swig_go_0) {
  RTPSessionFacade *arg1 = (RTPSessionFacade *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(RTPSessionFacade **)&_swig_go_0; 
  
  result = (int)(arg1)->GetLocalPort();
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_RTPSessionFacade_SetRemotePort_native_2ca2fe9cd83b6fb4(RTPSessionFacade *_swig_go_0, _gostring_ _swig_go_1, intgo _swig_go_2) {
  RTPSessionFacade *arg1 = (RTPSessionFacade *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(RTPSessionFacade **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  arg3 = (int)_swig_go_2; 
  
  result = (int)(arg1)->SetRemotePort(arg2,arg3);
  _swig_go_result = result; 
  free(arg2); 
  return _swig_go_result;
}


RTPOutgoingSourceGroup *_wrap_RTPSessionFacade_GetOutgoingSourceGroup_native_2ca2fe9cd83b6fb4(RTPSessionFacade *_swig_go_0) {
  RTPSessionFacade *arg1 = (RTPSessionFacade *) 0 ;
  RTPOutgoingSourceGroup *result = 0 ;
  RTPOutgoingSourceGroup *_swig_go_result;
  
  arg1 = *(RTPSessionFacade **)&_swig_go_0; 
  
  result = (RTPOutgoingSourceGroup *)(arg1)->GetOutgoingSourceGroup();
  *(RTPOutgoingSourceGroup **)&_swig_go_result = (RTPOutgoingSourceGroup *)result; 
  return _swig_go_result;
}


RTPIncomingSourceGroup *_wrap_RTPSessionFacade_GetIncomingSourceGroup_native_2ca2fe9cd83b6fb4(RTPSessionFacade *_swig_go_0) {
  RTPSessionFacade *arg1 = (RTPSessionFacade *) 0 ;
  RTPIncomingSourceGroup *result = 0 ;
  RTPIncomingSourceGroup *_swig_go_result;
  
  arg1 = *(RTPSessionFacade **)&_swig_go_0; 
  
  result = (RTPIncomingSourceGroup *)(arg1)->GetIncomingSourceGroup();
  *(RTPIncomingSourceGroup **)&_swig_go_result = (RTPIncomingSourceGroup *)result; 
  return _swig_go_result;
}


intgo _wrap_RTPSessionFacade_End_native_2ca2fe9cd83b6fb4(RTPSessionFacade *_swig_go_0) {
  RTPSessionFacade *arg1 = (RTPSessionFacade *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(RTPSessionFacade **)&_swig_go_0; 
  
  result = (int)(arg1)->End();
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_RTPSessionFacade_Enqueue_native_2ca2fe9cd83b6fb4(RTPSessionFacade *_swig_go_0, RTPPacket::shared *_swig_go_1) {
  RTPSessionFacade *arg1 = (RTPSessionFacade *) 0 ;
  RTPPacket::shared *arg2 = 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(RTPSessionFacade **)&_swig_go_0; 
  arg2 = *(RTPPacket::shared **)&_swig_go_1; 
  
  result = (int)(arg1)->Enqueue((RTPPacket::shared const &)*arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_RTPSessionFacade_SendPLI_native_2ca2fe9cd83b6fb4(RTPSessionFacade *_swig_go_0, intgo _swig_go_1) {
  RTPSessionFacade *arg1 = (RTPSessionFacade *) 0 ;
  uint32_t arg2 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(RTPSessionFacade **)&_swig_go_0; 
  arg2 = (uint32_t)_swig_go_1; 
  
  result = (int)(arg1)->SendPLI(arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_delete_RTPSessionFacade_native_2ca2fe9cd83b6fb4(RTPSessionFacade *_swig_go_0) {
  RTPSessionFacade *arg1 = (RTPSessionFacade *) 0 ;
  
  arg1 = *(RTPSessionFacade **)&_swig_go_0; 
  
  delete arg1;
  
}


RTPReceiver *_wrap_RTPSessionFacade_SwigGetRTPReceiver_native_2ca2fe9cd83b6fb4(RTPSessionFacade *_swig_go_0) {
  RTPSessionFacade *arg1 = (RTPSessionFacade *) 0 ;
  RTPReceiver *result = 0 ;
  RTPReceiver *_swig_go_result;
  
  arg1 = *(RTPSessionFacade **)&_swig_go_0; 
  
  result = (RTPReceiver*)arg1;
  *(RTPReceiver **)&_swig_go_result = (RTPReceiver *)result; 
  return _swig_go_result;
}


RTPSenderFacade *_wrap_new_RTPSenderFacade__SWIG_0_native_2ca2fe9cd83b6fb4(DTLSICETransport *_swig_go_0) {
  DTLSICETransport *arg1 = (DTLSICETransport *) 0 ;
  RTPSenderFacade *result = 0 ;
  RTPSenderFacade *_swig_go_result;
  
  arg1 = *(DTLSICETransport **)&_swig_go_0; 
  
  result = (RTPSenderFacade *)new RTPSenderFacade(arg1);
  *(RTPSenderFacade **)&_swig_go_result = (RTPSenderFacade *)result; 
  return _swig_go_result;
}


RTPSenderFacade *_wrap_new_RTPSenderFacade__SWIG_1_native_2ca2fe9cd83b6fb4(RTPSessionFacade *_swig_go_0) {
  RTPSessionFacade *arg1 = (RTPSessionFacade *) 0 ;
  RTPSenderFacade *result = 0 ;
  RTPSenderFacade *_swig_go_result;
  
  arg1 = *(RTPSessionFacade **)&_swig_go_0; 
  
  result = (RTPSenderFacade *)new RTPSenderFacade(arg1);
  *(RTPSenderFacade **)&_swig_go_result = (RTPSenderFacade *)result; 
  return _swig_go_result;
}


RTPSender *_wrap_RTPSenderFacade_get_native_2ca2fe9cd83b6fb4(RTPSenderFacade *_swig_go_0) {
  RTPSenderFacade *arg1 = (RTPSenderFacade *) 0 ;
  RTPSender *result = 0 ;
  RTPSender *_swig_go_result;
  
  arg1 = *(RTPSenderFacade **)&_swig_go_0; 
  
  result = (RTPSender *)(arg1)->get();
  *(RTPSender **)&_swig_go_result = (RTPSender *)result; 
  return _swig_go_result;
}


void _wrap_delete_RTPSenderFacade_native_2ca2fe9cd83b6fb4(RTPSenderFacade *_swig_go_0) {
  RTPSenderFacade *arg1 = (RTPSenderFacade *) 0 ;
  
  arg1 = *(RTPSenderFacade **)&_swig_go_0; 
  
  delete arg1;
  
}


RTPReceiverFacade *_wrap_new_RTPReceiverFacade__SWIG_0_native_2ca2fe9cd83b6fb4(DTLSICETransport *_swig_go_0) {
  DTLSICETransport *arg1 = (DTLSICETransport *) 0 ;
  RTPReceiverFacade *result = 0 ;
  RTPReceiverFacade *_swig_go_result;
  
  arg1 = *(DTLSICETransport **)&_swig_go_0; 
  
  result = (RTPReceiverFacade *)new RTPReceiverFacade(arg1);
  *(RTPReceiverFacade **)&_swig_go_result = (RTPReceiverFacade *)result; 
  return _swig_go_result;
}


RTPReceiverFacade *_wrap_new_RTPReceiverFacade__SWIG_1_native_2ca2fe9cd83b6fb4(RTPSessionFacade *_swig_go_0) {
  RTPSessionFacade *arg1 = (RTPSessionFacade *) 0 ;
  RTPReceiverFacade *result = 0 ;
  RTPReceiverFacade *_swig_go_result;
  
  arg1 = *(RTPSessionFacade **)&_swig_go_0; 
  
  result = (RTPReceiverFacade *)new RTPReceiverFacade(arg1);
  *(RTPReceiverFacade **)&_swig_go_result = (RTPReceiverFacade *)result; 
  return _swig_go_result;
}


RTPReceiver *_wrap_RTPReceiverFacade_get_native_2ca2fe9cd83b6fb4(RTPReceiverFacade *_swig_go_0) {
  RTPReceiverFacade *arg1 = (RTPReceiverFacade *) 0 ;
  RTPReceiver *result = 0 ;
  RTPReceiver *_swig_go_result;
  
  arg1 = *(RTPReceiverFacade **)&_swig_go_0; 
  
  result = (RTPReceiver *)(arg1)->get();
  *(RTPReceiver **)&_swig_go_result = (RTPReceiver *)result; 
  return _swig_go_result;
}


intgo _wrap_RTPReceiverFacade_SendPLI_native_2ca2fe9cd83b6fb4(RTPReceiverFacade *_swig_go_0, intgo _swig_go_1) {
  RTPReceiverFacade *arg1 = (RTPReceiverFacade *) 0 ;
  uint32_t arg2 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(RTPReceiverFacade **)&_swig_go_0; 
  arg2 = (uint32_t)_swig_go_1; 
  
  result = (int)(arg1)->SendPLI(arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_delete_RTPReceiverFacade_native_2ca2fe9cd83b6fb4(RTPReceiverFacade *_swig_go_0) {
  RTPReceiverFacade *arg1 = (RTPReceiverFacade *) 0 ;
  
  arg1 = *(RTPReceiverFacade **)&_swig_go_0; 
  
  delete arg1;
  
}


RTPSenderFacade *_wrap_TransportToSender_native_2ca2fe9cd83b6fb4(DTLSICETransport *_swig_go_0) {
  DTLSICETransport *arg1 = (DTLSICETransport *) 0 ;
  RTPSenderFacade *result = 0 ;
  RTPSenderFacade *_swig_go_result;
  
  arg1 = *(DTLSICETransport **)&_swig_go_0; 
  
  result = (RTPSenderFacade *)TransportToSender(arg1);
  *(RTPSenderFacade **)&_swig_go_result = (RTPSenderFacade *)result; 
  return _swig_go_result;
}


RTPReceiverFacade *_wrap_TransportToReceiver_native_2ca2fe9cd83b6fb4(DTLSICETransport *_swig_go_0) {
  DTLSICETransport *arg1 = (DTLSICETransport *) 0 ;
  RTPReceiverFacade *result = 0 ;
  RTPReceiverFacade *_swig_go_result;
  
  arg1 = *(DTLSICETransport **)&_swig_go_0; 
  
  result = (RTPReceiverFacade *)TransportToReceiver(arg1);
  *(RTPReceiverFacade **)&_swig_go_result = (RTPReceiverFacade *)result; 
  return _swig_go_result;
}


RTPSenderFacade *_wrap_SessionToSender_native_2ca2fe9cd83b6fb4(RTPSessionFacade *_swig_go_0) {
  RTPSessionFacade *arg1 = (RTPSessionFacade *) 0 ;
  RTPSenderFacade *result = 0 ;
  RTPSenderFacade *_swig_go_result;
  
  arg1 = *(RTPSessionFacade **)&_swig_go_0; 
  
  result = (RTPSenderFacade *)SessionToSender(arg1);
  *(RTPSenderFacade **)&_swig_go_result = (RTPSenderFacade *)result; 
  return _swig_go_result;
}


RTPReceiverFacade *_wrap_SessionToReceiver_native_2ca2fe9cd83b6fb4(RTPSessionFacade *_swig_go_0) {
  RTPSessionFacade *arg1 = (RTPSessionFacade *) 0 ;
  RTPReceiverFacade *result = 0 ;
  RTPReceiverFacade *_swig_go_result;
  
  arg1 = *(RTPSessionFacade **)&_swig_go_0; 
  
  result = (RTPReceiverFacade *)SessionToReceiver(arg1);
  *(RTPReceiverFacade **)&_swig_go_result = (RTPReceiverFacade *)result; 
  return _swig_go_result;
}


RTPReceiverFacade *_wrap_RTPSessionToReceiver_native_2ca2fe9cd83b6fb4(MediaFrameSessionFacade *_swig_go_0) {
  MediaFrameSessionFacade *arg1 = (MediaFrameSessionFacade *) 0 ;
  RTPReceiverFacade *result = 0 ;
  RTPReceiverFacade *_swig_go_result;
  
  arg1 = *(MediaFrameSessionFacade **)&_swig_go_0; 
  
  result = (RTPReceiverFacade *)RTPSessionToReceiver(arg1);
  *(RTPReceiverFacade **)&_swig_go_result = (RTPReceiverFacade *)result; 
  return _swig_go_result;
}


RTPStreamTransponderFacade *_wrap_new_RTPStreamTransponderFacade_native_2ca2fe9cd83b6fb4(RTPOutgoingSourceGroup *_swig_go_0, RTPSenderFacade *_swig_go_1) {
  RTPOutgoingSourceGroup *arg1 = (RTPOutgoingSourceGroup *) 0 ;
  RTPSenderFacade *arg2 = (RTPSenderFacade *) 0 ;
  RTPStreamTransponderFacade *result = 0 ;
  RTPStreamTransponderFacade *_swig_go_result;
  
  arg1 = *(RTPOutgoingSourceGroup **)&_swig_go_0; 
  arg2 = *(RTPSenderFacade **)&_swig_go_1; 
  
  result = (RTPStreamTransponderFacade *)new RTPStreamTransponderFacade(arg1,arg2);
  *(RTPStreamTransponderFacade **)&_swig_go_result = (RTPStreamTransponderFacade *)result; 
  return _swig_go_result;
}


bool _wrap_RTPStreamTransponderFacade_SetIncoming__SWIG_0_native_2ca2fe9cd83b6fb4(RTPStreamTransponderFacade *_swig_go_0, RTPIncomingMediaStream *_swig_go_1, RTPReceiverFacade *_swig_go_2) {
  RTPStreamTransponderFacade *arg1 = (RTPStreamTransponderFacade *) 0 ;
  RTPIncomingMediaStream *arg2 = (RTPIncomingMediaStream *) 0 ;
  RTPReceiverFacade *arg3 = (RTPReceiverFacade *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(RTPStreamTransponderFacade **)&_swig_go_0; 
  arg2 = *(RTPIncomingMediaStream **)&_swig_go_1; 
  arg3 = *(RTPReceiverFacade **)&_swig_go_2; 
  
  result = (bool)(arg1)->SetIncoming(arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_RTPStreamTransponderFacade_SetIncoming__SWIG_1_native_2ca2fe9cd83b6fb4(RTPStreamTransponderFacade *_swig_go_0, RTPIncomingMediaStream *_swig_go_1, RTPReceiver *_swig_go_2) {
  RTPStreamTransponderFacade *arg1 = (RTPStreamTransponderFacade *) 0 ;
  RTPIncomingMediaStream *arg2 = (RTPIncomingMediaStream *) 0 ;
  RTPReceiver *arg3 = (RTPReceiver *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(RTPStreamTransponderFacade **)&_swig_go_0; 
  arg2 = *(RTPIncomingMediaStream **)&_swig_go_1; 
  arg3 = *(RTPReceiver **)&_swig_go_2; 
  
  result = (bool)(arg1)->SetIncoming(arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_RTPStreamTransponderFacade_SelectLayer_native_2ca2fe9cd83b6fb4(RTPStreamTransponderFacade *_swig_go_0, intgo _swig_go_1, intgo _swig_go_2) {
  RTPStreamTransponderFacade *arg1 = (RTPStreamTransponderFacade *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = *(RTPStreamTransponderFacade **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = (int)_swig_go_2; 
  
  (arg1)->SelectLayer(arg2,arg3);
  
}


void _wrap_RTPStreamTransponderFacade_Mute_native_2ca2fe9cd83b6fb4(RTPStreamTransponderFacade *_swig_go_0, bool _swig_go_1) {
  RTPStreamTransponderFacade *arg1 = (RTPStreamTransponderFacade *) 0 ;
  bool arg2 ;
  
  arg1 = *(RTPStreamTransponderFacade **)&_swig_go_0; 
  arg2 = (bool)_swig_go_1; 
  
  (arg1)->Mute(arg2);
  
}


void _wrap_RTPStreamTransponderFacade_Close_native_2ca2fe9cd83b6fb4(RTPStreamTransponderFacade *_swig_go_0) {
  RTPStreamTransponderFacade *arg1 = (RTPStreamTransponderFacade *) 0 ;
  
  arg1 = *(RTPStreamTransponderFacade **)&_swig_go_0; 
  
  (arg1)->Close();
  
}


void _wrap_delete_RTPStreamTransponderFacade_native_2ca2fe9cd83b6fb4(RTPStreamTransponderFacade *_swig_go_0) {
  RTPStreamTransponderFacade *arg1 = (RTPStreamTransponderFacade *) 0 ;
  
  arg1 = *(RTPStreamTransponderFacade **)&_swig_go_0; 
  
  delete arg1;
  
}


StreamTrackDepacketizer *_wrap_new_StreamTrackDepacketizer_native_2ca2fe9cd83b6fb4(RTPIncomingMediaStream *_swig_go_0) {
  RTPIncomingMediaStream *arg1 = (RTPIncomingMediaStream *) 0 ;
  StreamTrackDepacketizer *result = 0 ;
  StreamTrackDepacketizer *_swig_go_result;
  
  arg1 = *(RTPIncomingMediaStream **)&_swig_go_0; 
  
  result = (StreamTrackDepacketizer *)new StreamTrackDepacketizer(arg1);
  *(StreamTrackDepacketizer **)&_swig_go_result = (StreamTrackDepacketizer *)result; 
  return _swig_go_result;
}


void _wrap_StreamTrackDepacketizer_AddMediaListener_native_2ca2fe9cd83b6fb4(StreamTrackDepacketizer *_swig_go_0, MediaFrameListener *_swig_go_1) {
  StreamTrackDepacketizer *arg1 = (StreamTrackDepacketizer *) 0 ;
  MediaFrameListener *arg2 = (MediaFrameListener *) 0 ;
  
  arg1 = *(StreamTrackDepacketizer **)&_swig_go_0; 
  arg2 = *(MediaFrameListener **)&_swig_go_1; 
  
  (arg1)->AddMediaListener(arg2);
  
}


void _wrap_StreamTrackDepacketizer_RemoveMediaListener_native_2ca2fe9cd83b6fb4(StreamTrackDepacketizer *_swig_go_0, MediaFrameListener *_swig_go_1) {
  StreamTrackDepacketizer *arg1 = (StreamTrackDepacketizer *) 0 ;
  MediaFrameListener *arg2 = (MediaFrameListener *) 0 ;
  
  arg1 = *(StreamTrackDepacketizer **)&_swig_go_0; 
  arg2 = *(MediaFrameListener **)&_swig_go_1; 
  
  (arg1)->RemoveMediaListener(arg2);
  
}


void _wrap_StreamTrackDepacketizer_Stop_native_2ca2fe9cd83b6fb4(StreamTrackDepacketizer *_swig_go_0) {
  StreamTrackDepacketizer *arg1 = (StreamTrackDepacketizer *) 0 ;
  
  arg1 = *(StreamTrackDepacketizer **)&_swig_go_0; 
  
  (arg1)->Stop();
  
}


void _wrap_delete_StreamTrackDepacketizer_native_2ca2fe9cd83b6fb4(StreamTrackDepacketizer *_swig_go_0) {
  StreamTrackDepacketizer *arg1 = (StreamTrackDepacketizer *) 0 ;
  
  arg1 = *(StreamTrackDepacketizer **)&_swig_go_0; 
  
  delete arg1;
  
}


MP4RecorderFacade *_wrap_new_MP4RecorderFacade_native_2ca2fe9cd83b6fb4() {
  MP4RecorderFacade *result = 0 ;
  MP4RecorderFacade *_swig_go_result;
  
  
  result = (MP4RecorderFacade *)new MP4RecorderFacade();
  *(MP4RecorderFacade **)&_swig_go_result = (MP4RecorderFacade *)result; 
  return _swig_go_result;
}


bool _wrap_MP4RecorderFacade_Create_native_2ca2fe9cd83b6fb4(MP4RecorderFacade *_swig_go_0, _gostring_ _swig_go_1) {
  MP4RecorderFacade *arg1 = (MP4RecorderFacade *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(MP4RecorderFacade **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  
  result = (bool)(arg1)->Create((char const *)arg2);
  _swig_go_result = result; 
  free(arg2); 
  return _swig_go_result;
}


bool _wrap_MP4RecorderFacade_Record__SWIG_0_native_2ca2fe9cd83b6fb4(MP4RecorderFacade *_swig_go_0) {
  MP4RecorderFacade *arg1 = (MP4RecorderFacade *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(MP4RecorderFacade **)&_swig_go_0; 
  
  result = (bool)(arg1)->Record();
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_MP4RecorderFacade_Record__SWIG_1_native_2ca2fe9cd83b6fb4(MP4RecorderFacade *_swig_go_0, bool _swig_go_1) {
  MP4RecorderFacade *arg1 = (MP4RecorderFacade *) 0 ;
  bool arg2 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(MP4RecorderFacade **)&_swig_go_0; 
  arg2 = (bool)_swig_go_1; 
  
  result = (bool)(arg1)->Record(arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_MP4RecorderFacade_Stop_native_2ca2fe9cd83b6fb4(MP4RecorderFacade *_swig_go_0) {
  MP4RecorderFacade *arg1 = (MP4RecorderFacade *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(MP4RecorderFacade **)&_swig_go_0; 
  
  result = (bool)(arg1)->Stop();
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_MP4RecorderFacade_Close__SWIG_0_native_2ca2fe9cd83b6fb4(MP4RecorderFacade *_swig_go_0) {
  MP4RecorderFacade *arg1 = (MP4RecorderFacade *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(MP4RecorderFacade **)&_swig_go_0; 
  
  result = (bool)(arg1)->Close();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_MP4RecorderFacade_SetTimeShiftDuration_native_2ca2fe9cd83b6fb4(MP4RecorderFacade *_swig_go_0, intgo _swig_go_1) {
  MP4RecorderFacade *arg1 = (MP4RecorderFacade *) 0 ;
  uint32_t arg2 ;
  
  arg1 = *(MP4RecorderFacade **)&_swig_go_0; 
  arg2 = (uint32_t)_swig_go_1; 
  
  (arg1)->SetTimeShiftDuration(arg2);
  
}


bool _wrap_MP4RecorderFacade_Close__SWIG_1_native_2ca2fe9cd83b6fb4(MP4RecorderFacade *_swig_go_0, bool _swig_go_1) {
  MP4RecorderFacade *arg1 = (MP4RecorderFacade *) 0 ;
  bool arg2 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(MP4RecorderFacade **)&_swig_go_0; 
  arg2 = (bool)_swig_go_1; 
  
  result = (bool)(arg1)->Close(arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_delete_MP4RecorderFacade_native_2ca2fe9cd83b6fb4(MP4RecorderFacade *_swig_go_0) {
  MP4RecorderFacade *arg1 = (MP4RecorderFacade *) 0 ;
  
  arg1 = *(MP4RecorderFacade **)&_swig_go_0; 
  
  delete arg1;
  
}


MediaFrameSessionFacade *_wrap_new_MediaFrameSessionFacade_native_2ca2fe9cd83b6fb4(intgo _swig_go_0) {
  MediaFrameType arg1 ;
  MediaFrameSessionFacade *result = 0 ;
  MediaFrameSessionFacade *_swig_go_result;
  
  arg1 = (MediaFrameType)_swig_go_0; 
  
  result = (MediaFrameSessionFacade *)new MediaFrameSessionFacade(arg1);
  *(MediaFrameSessionFacade **)&_swig_go_result = (MediaFrameSessionFacade *)result; 
  return _swig_go_result;
}


intgo _wrap_MediaFrameSessionFacade_Init_native_2ca2fe9cd83b6fb4(MediaFrameSessionFacade *_swig_go_0, Properties *_swig_go_1) {
  MediaFrameSessionFacade *arg1 = (MediaFrameSessionFacade *) 0 ;
  Properties *arg2 = 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(MediaFrameSessionFacade **)&_swig_go_0; 
  arg2 = *(Properties **)&_swig_go_1; 
  
  result = (int)(arg1)->Init((Properties const &)*arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_MediaFrameSessionFacade_onRTPPacket_native_2ca2fe9cd83b6fb4(MediaFrameSessionFacade *_swig_go_0, char *_swig_go_1, intgo _swig_go_2) {
  MediaFrameSessionFacade *arg1 = (MediaFrameSessionFacade *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  int arg3 ;
  
  arg1 = *(MediaFrameSessionFacade **)&_swig_go_0; 
  arg2 = *(uint8_t **)&_swig_go_1; 
  arg3 = (int)_swig_go_2; 
  
  (arg1)->onRTPPacket(arg2,arg3);
  
}


void _wrap_MediaFrameSessionFacade_onRTPData_native_2ca2fe9cd83b6fb4(MediaFrameSessionFacade *_swig_go_0, char *_swig_go_1, intgo _swig_go_2, char _swig_go_3) {
  MediaFrameSessionFacade *arg1 = (MediaFrameSessionFacade *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  int arg3 ;
  uint8_t arg4 ;
  
  arg1 = *(MediaFrameSessionFacade **)&_swig_go_0; 
  arg2 = *(uint8_t **)&_swig_go_1; 
  arg3 = (int)_swig_go_2; 
  arg4 = (uint8_t)_swig_go_3; 
  
  (arg1)->onRTPData(arg2,arg3,arg4);
  
}


RTPIncomingSourceGroup *_wrap_MediaFrameSessionFacade_GetIncomingSourceGroup_native_2ca2fe9cd83b6fb4(MediaFrameSessionFacade *_swig_go_0) {
  MediaFrameSessionFacade *arg1 = (MediaFrameSessionFacade *) 0 ;
  RTPIncomingSourceGroup *result = 0 ;
  RTPIncomingSourceGroup *_swig_go_result;
  
  arg1 = *(MediaFrameSessionFacade **)&_swig_go_0; 
  
  result = (RTPIncomingSourceGroup *)(arg1)->GetIncomingSourceGroup();
  *(RTPIncomingSourceGroup **)&_swig_go_result = (RTPIncomingSourceGroup *)result; 
  return _swig_go_result;
}


intgo _wrap_MediaFrameSessionFacade_End_native_2ca2fe9cd83b6fb4(MediaFrameSessionFacade *_swig_go_0) {
  MediaFrameSessionFacade *arg1 = (MediaFrameSessionFacade *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(MediaFrameSessionFacade **)&_swig_go_0; 
  
  result = (int)(arg1)->End();
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_MediaFrameSessionFacade_SendPLI_native_2ca2fe9cd83b6fb4(MediaFrameSessionFacade *_swig_go_0, intgo _swig_go_1) {
  MediaFrameSessionFacade *arg1 = (MediaFrameSessionFacade *) 0 ;
  uint32_t arg2 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(MediaFrameSessionFacade **)&_swig_go_0; 
  arg2 = (uint32_t)_swig_go_1; 
  
  result = (int)(arg1)->SendPLI(arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_delete_MediaFrameSessionFacade_native_2ca2fe9cd83b6fb4(MediaFrameSessionFacade *_swig_go_0) {
  MediaFrameSessionFacade *arg1 = (MediaFrameSessionFacade *) 0 ;
  
  arg1 = *(MediaFrameSessionFacade **)&_swig_go_0; 
  
  delete arg1;
  
}


SenderSideEstimatorListener *_wrap__swig_NewDirectorSenderSideEstimatorListenerSenderSideEstimatorListener_native_2ca2fe9cd83b6fb4(intgo _swig_go_0) {
  int arg1 ;
  SenderSideEstimatorListener *result = 0 ;
  SenderSideEstimatorListener *_swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  
  result = new SwigDirector_SenderSideEstimatorListener(arg1);
  *(SenderSideEstimatorListener **)&_swig_go_result = (SenderSideEstimatorListener *)result; 
  return _swig_go_result;
}


void _wrap_DeleteDirectorSenderSideEstimatorListener_native_2ca2fe9cd83b6fb4(SenderSideEstimatorListener *_swig_go_0) {
  SenderSideEstimatorListener *arg1 = (SenderSideEstimatorListener *) 0 ;
  
  arg1 = *(SenderSideEstimatorListener **)&_swig_go_0; 
  
  delete arg1;
  
}


SenderSideEstimatorListener *_wrap_new_SenderSideEstimatorListener_native_2ca2fe9cd83b6fb4() {
  SenderSideEstimatorListener *result = 0 ;
  SenderSideEstimatorListener *_swig_go_result;
  
  
  result = (SenderSideEstimatorListener *)new SenderSideEstimatorListener();
  *(SenderSideEstimatorListener **)&_swig_go_result = (SenderSideEstimatorListener *)result; 
  return _swig_go_result;
}


void _wrap_delete_SenderSideEstimatorListener_native_2ca2fe9cd83b6fb4(SenderSideEstimatorListener *_swig_go_0) {
  SenderSideEstimatorListener *arg1 = (SenderSideEstimatorListener *) 0 ;
  
  arg1 = *(SenderSideEstimatorListener **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_SenderSideEstimatorListener_onTargetBitrateRequested_native_2ca2fe9cd83b6fb4(SenderSideEstimatorListener *_swig_go_0, intgo _swig_go_1) {
  SenderSideEstimatorListener *arg1 = (SenderSideEstimatorListener *) 0 ;
  uint32_t arg2 ;
  
  arg1 = *(SenderSideEstimatorListener **)&_swig_go_0; 
  arg2 = (uint32_t)_swig_go_1; 
  
  (arg1)->onTargetBitrateRequested(arg2);
  
}


ActiveSpeakerDetectorFacade *_wrap_new_ActiveSpeakerDetectorFacade_native_2ca2fe9cd83b6fb4(ActiveTrackListener *_swig_go_0) {
  ActiveTrackListener *arg1 = (ActiveTrackListener *) 0 ;
  ActiveSpeakerDetectorFacade *result = 0 ;
  ActiveSpeakerDetectorFacade *_swig_go_result;
  
  arg1 = *(ActiveTrackListener **)&_swig_go_0; 
  
  result = (ActiveSpeakerDetectorFacade *)new ActiveSpeakerDetectorFacade(arg1);
  *(ActiveSpeakerDetectorFacade **)&_swig_go_result = (ActiveSpeakerDetectorFacade *)result; 
  return _swig_go_result;
}


void _wrap_ActiveSpeakerDetectorFacade_SetMinChangePeriod_native_2ca2fe9cd83b6fb4(ActiveSpeakerDetectorFacade *_swig_go_0, intgo _swig_go_1) {
  ActiveSpeakerDetectorFacade *arg1 = (ActiveSpeakerDetectorFacade *) 0 ;
  uint32_t arg2 ;
  
  arg1 = *(ActiveSpeakerDetectorFacade **)&_swig_go_0; 
  arg2 = (uint32_t)_swig_go_1; 
  
  (arg1)->SetMinChangePeriod(arg2);
  
}


void _wrap_ActiveSpeakerDetectorFacade_SetMaxAccumulatedScore_native_2ca2fe9cd83b6fb4(ActiveSpeakerDetectorFacade *_swig_go_0, long long _swig_go_1) {
  ActiveSpeakerDetectorFacade *arg1 = (ActiveSpeakerDetectorFacade *) 0 ;
  uint64_t arg2 ;
  
  arg1 = *(ActiveSpeakerDetectorFacade **)&_swig_go_0; 
  arg2 = (uint64_t)_swig_go_1; 
  
  (arg1)->SetMaxAccumulatedScore(arg2);
  
}


void _wrap_ActiveSpeakerDetectorFacade_SetNoiseGatingThreshold_native_2ca2fe9cd83b6fb4(ActiveSpeakerDetectorFacade *_swig_go_0, char _swig_go_1) {
  ActiveSpeakerDetectorFacade *arg1 = (ActiveSpeakerDetectorFacade *) 0 ;
  uint8_t arg2 ;
  
  arg1 = *(ActiveSpeakerDetectorFacade **)&_swig_go_0; 
  arg2 = (uint8_t)_swig_go_1; 
  
  (arg1)->SetNoiseGatingThreshold(arg2);
  
}


void _wrap_ActiveSpeakerDetectorFacade_SetMinActivationScore_native_2ca2fe9cd83b6fb4(ActiveSpeakerDetectorFacade *_swig_go_0, intgo _swig_go_1) {
  ActiveSpeakerDetectorFacade *arg1 = (ActiveSpeakerDetectorFacade *) 0 ;
  uint32_t arg2 ;
  
  arg1 = *(ActiveSpeakerDetectorFacade **)&_swig_go_0; 
  arg2 = (uint32_t)_swig_go_1; 
  
  (arg1)->SetMinActivationScore(arg2);
  
}


void _wrap_ActiveSpeakerDetectorFacade_AddIncomingSourceGroup_native_2ca2fe9cd83b6fb4(ActiveSpeakerDetectorFacade *_swig_go_0, RTPIncomingMediaStream *_swig_go_1, intgo _swig_go_2) {
  ActiveSpeakerDetectorFacade *arg1 = (ActiveSpeakerDetectorFacade *) 0 ;
  RTPIncomingMediaStream *arg2 = (RTPIncomingMediaStream *) 0 ;
  uint32_t arg3 ;
  
  arg1 = *(ActiveSpeakerDetectorFacade **)&_swig_go_0; 
  arg2 = *(RTPIncomingMediaStream **)&_swig_go_1; 
  arg3 = (uint32_t)_swig_go_2; 
  
  (arg1)->AddIncomingSourceGroup(arg2,arg3);
  
}


void _wrap_ActiveSpeakerDetectorFacade_RemoveIncomingSourceGroup_native_2ca2fe9cd83b6fb4(ActiveSpeakerDetectorFacade *_swig_go_0, RTPIncomingMediaStream *_swig_go_1) {
  ActiveSpeakerDetectorFacade *arg1 = (ActiveSpeakerDetectorFacade *) 0 ;
  RTPIncomingMediaStream *arg2 = (RTPIncomingMediaStream *) 0 ;
  
  arg1 = *(ActiveSpeakerDetectorFacade **)&_swig_go_0; 
  arg2 = *(RTPIncomingMediaStream **)&_swig_go_1; 
  
  (arg1)->RemoveIncomingSourceGroup(arg2);
  
}


void _wrap_delete_ActiveSpeakerDetectorFacade_native_2ca2fe9cd83b6fb4(ActiveSpeakerDetectorFacade *_swig_go_0) {
  ActiveSpeakerDetectorFacade *arg1 = (ActiveSpeakerDetectorFacade *) 0 ;
  
  arg1 = *(ActiveSpeakerDetectorFacade **)&_swig_go_0; 
  
  delete arg1;
  
}


MediaFrameListenerFacade *_wrap__swig_NewDirectorMediaFrameListenerFacadeMediaFrameListenerFacade_native_2ca2fe9cd83b6fb4(intgo _swig_go_0) {
  int arg1 ;
  MediaFrameListenerFacade *result = 0 ;
  MediaFrameListenerFacade *_swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  
  result = new SwigDirector_MediaFrameListenerFacade(arg1);
  *(MediaFrameListenerFacade **)&_swig_go_result = (MediaFrameListenerFacade *)result; 
  return _swig_go_result;
}


void _wrap_DeleteDirectorMediaFrameListenerFacade_native_2ca2fe9cd83b6fb4(MediaFrameListenerFacade *_swig_go_0) {
  MediaFrameListenerFacade *arg1 = (MediaFrameListenerFacade *) 0 ;
  
  arg1 = *(MediaFrameListenerFacade **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap__swig_DirectorMediaFrameListenerFacade_upcall_OnMediaFrame_native_2ca2fe9cd83b6fb4(SwigDirector_MediaFrameListenerFacade *_swig_go_0, MediaFrame *_swig_go_1) {
  SwigDirector_MediaFrameListenerFacade *arg1 = (SwigDirector_MediaFrameListenerFacade *) 0 ;
  MediaFrame *arg2 = 0 ;
  
  arg1 = *(SwigDirector_MediaFrameListenerFacade **)&_swig_go_0; 
  arg2 = *(MediaFrame **)&_swig_go_1; 
  
  arg1->_swig_upcall_onMediaFrame(*arg2);
  
}


MediaFrameListenerFacade *_wrap_new_MediaFrameListenerFacade_native_2ca2fe9cd83b6fb4() {
  MediaFrameListenerFacade *result = 0 ;
  MediaFrameListenerFacade *_swig_go_result;
  
  
  result = (MediaFrameListenerFacade *)new MediaFrameListenerFacade();
  *(MediaFrameListenerFacade **)&_swig_go_result = (MediaFrameListenerFacade *)result; 
  return _swig_go_result;
}


void _wrap_delete_MediaFrameListenerFacade_native_2ca2fe9cd83b6fb4(MediaFrameListenerFacade *_swig_go_0) {
  MediaFrameListenerFacade *arg1 = (MediaFrameListenerFacade *) 0 ;
  
  arg1 = *(MediaFrameListenerFacade **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_MediaFrameListenerFacade_onMediaFrame_native_2ca2fe9cd83b6fb4(MediaFrameListenerFacade *_swig_go_0, MediaFrame *_swig_go_1) {
  MediaFrameListenerFacade *arg1 = (MediaFrameListenerFacade *) 0 ;
  MediaFrame *arg2 = 0 ;
  
  arg1 = *(MediaFrameListenerFacade **)&_swig_go_0; 
  arg2 = *(MediaFrame **)&_swig_go_1; 
  
  (arg1)->onMediaFrame((MediaFrame const &)*arg2);
  
}


MediaFrameMultiplexer *_wrap_new_MediaFrameMultiplexer_native_2ca2fe9cd83b6fb4(RTPIncomingMediaStream *_swig_go_0) {
  RTPIncomingMediaStream *arg1 = (RTPIncomingMediaStream *) 0 ;
  MediaFrameMultiplexer *result = 0 ;
  MediaFrameMultiplexer *_swig_go_result;
  
  arg1 = *(RTPIncomingMediaStream **)&_swig_go_0; 
  
  result = (MediaFrameMultiplexer *)new MediaFrameMultiplexer(arg1);
  *(MediaFrameMultiplexer **)&_swig_go_result = (MediaFrameMultiplexer *)result; 
  return _swig_go_result;
}


void _wrap_MediaFrameMultiplexer_AddMediaListener_native_2ca2fe9cd83b6fb4(MediaFrameMultiplexer *_swig_go_0, MediaFrameListenerFacade *_swig_go_1) {
  MediaFrameMultiplexer *arg1 = (MediaFrameMultiplexer *) 0 ;
  MediaFrameListenerFacade *arg2 = (MediaFrameListenerFacade *) 0 ;
  
  arg1 = *(MediaFrameMultiplexer **)&_swig_go_0; 
  arg2 = *(MediaFrameListenerFacade **)&_swig_go_1; 
  
  (arg1)->AddMediaListener(arg2);
  
}


void _wrap_MediaFrameMultiplexer_RemoveMediaListener_native_2ca2fe9cd83b6fb4(MediaFrameMultiplexer *_swig_go_0, MediaFrameListenerFacade *_swig_go_1) {
  MediaFrameMultiplexer *arg1 = (MediaFrameMultiplexer *) 0 ;
  MediaFrameListenerFacade *arg2 = (MediaFrameListenerFacade *) 0 ;
  
  arg1 = *(MediaFrameMultiplexer **)&_swig_go_0; 
  arg2 = *(MediaFrameListenerFacade **)&_swig_go_1; 
  
  (arg1)->RemoveMediaListener(arg2);
  
}


void _wrap_MediaFrameMultiplexer_Stop_native_2ca2fe9cd83b6fb4(MediaFrameMultiplexer *_swig_go_0) {
  MediaFrameMultiplexer *arg1 = (MediaFrameMultiplexer *) 0 ;
  
  arg1 = *(MediaFrameMultiplexer **)&_swig_go_0; 
  
  (arg1)->Stop();
  
}


void _wrap_delete_MediaFrameMultiplexer_native_2ca2fe9cd83b6fb4(MediaFrameMultiplexer *_swig_go_0) {
  MediaFrameMultiplexer *arg1 = (MediaFrameMultiplexer *) 0 ;
  
  arg1 = *(MediaFrameMultiplexer **)&_swig_go_0; 
  
  delete arg1;
  
}


ActiveTrackListener *_wrap__swig_NewDirectorActiveTrackListenerActiveTrackListener_native_2ca2fe9cd83b6fb4(intgo _swig_go_0) {
  int arg1 ;
  ActiveTrackListener *result = 0 ;
  ActiveTrackListener *_swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  
  result = new SwigDirector_ActiveTrackListener(arg1);
  *(ActiveTrackListener **)&_swig_go_result = (ActiveTrackListener *)result; 
  return _swig_go_result;
}


void _wrap_DeleteDirectorActiveTrackListener_native_2ca2fe9cd83b6fb4(ActiveTrackListener *_swig_go_0) {
  ActiveTrackListener *arg1 = (ActiveTrackListener *) 0 ;
  
  arg1 = *(ActiveTrackListener **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap__swig_DirectorActiveTrackListener_upcall_OnActiveTrackchanged_native_2ca2fe9cd83b6fb4(SwigDirector_ActiveTrackListener *_swig_go_0, intgo _swig_go_1) {
  SwigDirector_ActiveTrackListener *arg1 = (SwigDirector_ActiveTrackListener *) 0 ;
  uint32_t arg2 ;
  
  arg1 = *(SwigDirector_ActiveTrackListener **)&_swig_go_0; 
  arg2 = (uint32_t)_swig_go_1; 
  
  arg1->_swig_upcall_onActiveTrackchanged(arg2);
  
}


ActiveTrackListener *_wrap_new_ActiveTrackListener_native_2ca2fe9cd83b6fb4() {
  ActiveTrackListener *result = 0 ;
  ActiveTrackListener *_swig_go_result;
  
  
  result = (ActiveTrackListener *)new ActiveTrackListener();
  *(ActiveTrackListener **)&_swig_go_result = (ActiveTrackListener *)result; 
  return _swig_go_result;
}


void _wrap_delete_ActiveTrackListener_native_2ca2fe9cd83b6fb4(ActiveTrackListener *_swig_go_0) {
  ActiveTrackListener *arg1 = (ActiveTrackListener *) 0 ;
  
  arg1 = *(ActiveTrackListener **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_ActiveTrackListener_onActiveTrackchanged_native_2ca2fe9cd83b6fb4(ActiveTrackListener *_swig_go_0, intgo _swig_go_1) {
  ActiveTrackListener *arg1 = (ActiveTrackListener *) 0 ;
  uint32_t arg2 ;
  
  arg1 = *(ActiveTrackListener **)&_swig_go_0; 
  arg2 = (uint32_t)_swig_go_1; 
  
  (arg1)->onActiveTrackchanged(arg2);
  
}


#ifdef __cplusplus
}
#endif

